#+title: Editor Basics

Configuration for editor basics.

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
#+end_src

* Package management                                               :required:

** Straight

Straight.el is used for package management.

*** Disable startup check

#+begin_src emacs-lisp
  (setq straight-check-for-modifications '(check-on-save))
#+end_src

*** Disable native compilation

#+begin_src emacs-lisp
  (setq straight-disable-native-compile nil)
#+end_src

*** Key bindings

#+tblname: straight-keymap-table
| Key | Command                  |
|-----+--------------------------|
| c   | straight-check-package   |
| C   | straight-check-all       |
| p   | straight-pull-package    |
| P   | straight-pull-all        |
| b   | straight-rebuild-package |
| B   | straight-rebuild-all     |
| v   | straight-freeze-versions |

#+header: :var straight-keymap-table=straight-keymap-table
#+begin_src emacs-lisp
  (meomacs-keymap-table straight-keymap straight-keymap-table)
  (global-set-key (kbd "C-c S") 'straight-keymap)
#+end_src

* Better defaults

#+begin_src emacs-lisp
  ;;; Create for backup and autosave
  (make-directory "~/.backups" t)
  (make-directory "~/.autosaves" t)

  (setq-default

   ;; Disable splash screen
   inhibit-splash-screen t

   ;; Don't display comp warnings
   warning-suppress-log-types '((comp))
   ;; Don't create lockfiles
   create-lockfiles nil

   ;; prefer UTF8
   buffer-file-coding-system 'utf-8-unix
   default-file-name-coding-system 'utf-8-unix
   default-keyboard-coding-system 'utf-8-unix
   default-process-coding-system '(utf-8-unix . utf-8-unix)
   default-sendmail-coding-system 'utf-8-unix
   default-terminal-coding-system 'utf-8-unix

   ;; Add newline at bottom of file
   require-final-newline t

   ;; Set backup directory
   backup-directory-alist `(("." . ,(expand-file-name "~/.backups")))
   auto-save-file-name-transforms
   `((".*" ,(expand-file-name "~/.autosaves/") t))

   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t

   tramp-backup-directory-alist backup-directory-alist
   tramp-auto-save-directory (expand-file-name "~/.autosaves/")

   ;; Skip prompt for xref find definition
   xref-prompt-for-identifier nil

   ;; Don't wait for keystrokes display
   echo-keystrokes 0.01

   ;; Disable margin for overline and underline
   overline-margin 0
   underline-minimum-offset 0

   ;; Allow resizing frame by pixels
   frame-resize-pixelwise t

   ;; Better scroll behavior
   mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))
   mouse-wheel-progressive-speed nil

   ;; Disable copy region blink
   copy-region-blink-delay 0

   ;; Use short answer when asking yes or no
   read-answer-short t

   ;; Always follow link
   vc-follow-symlinks t

   ;; Use custom.el as custom file
   custom-file (expand-file-name "custom.el" user-emacs-directory)

   ;; Disable ring bell
   ring-bell-function 'ignore

   ;; Mouse yank at current point
   mouse-yank-at-point t

   ;; DWIM target for dired
   ;; Automatically use another dired buffer as target for copy/rename
   dired-dwim-target t

   ;; Use spaces instead of tab
   indent-tabs-mode nil

   ;; Don't echo multiline eldoc
   eldoc-echo-area-use-multiline-p nil

   ;; No cursor blink in TUI
   visible-cursor nil

   ;; Counter for isearch
   isearch-lazy-count t
   isearch-lazy-highlight t

   compilation-scroll-output 'first-error

   ;; Flatten imenu for easy searching
   imenu-flatten t

   ;; For scrolling performance
   fast-but-imprecise-scrolling t
   inhibit-compacting-font-caches t
   auto-window-vscroll nil

   ;; preserve scrolling position
   scroll-preserve-screen-position t

   ;; Wider fill column
   fill-column 100

   show-paren-style 'mixed

   mode-line-compact t)

  (when window-system
    (scroll-bar-mode -1))

  (global-subword-mode 1)
  (diminish 'subword-mode)

  (blink-cursor-mode -1)

  (savehist-mode)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (setq jit-lock-defer-time 0)
#+end_src

* COMMENT Meow

#+begin_src emacs-lisp
  (straight-use-package 'meow)

  (require 'meow)

  (setq meow-keypad-describe-keymap-function nil)

  ;; hide lighters
  (diminish 'meow-normal-mode)
  (diminish 'meow-motion-mode)
  (diminish 'meow-insert-mode)
  (diminish 'meow-keypad-mode)
  (diminish 'meow-beacon-mode)
#+end_src

** Load key bindings

Key bindings are defined in [[file:private.org::#Modal Editing Key Binding][private.org]].

#+header: :var normal-keybindings=private.org:normal-keybindings
#+header: :var motion-keybindings=private.org:motion-keybindings
#+begin_src emacs-lisp
  (defun meow-setup ()
    (let ((parse-def (lambda (x)
                       (cons (string-trim (format "%s" (car x)) "[[:space:]]" "[[:space:]]")
                             (if (string-prefix-p "dispatch:" (cadr x))
                                 (string-trim (substring (cadr x) 9))
                               (intern (cadr x)))))))
      (apply #'meow-normal-define-key (mapcar parse-def normal-keybindings))
      (apply #'meow-motion-define-key (mapcar parse-def motion-keybindings))))
#+end_src

** Basic configurations
#+begin_src emacs-lisp
  ;; custom variables
  (setq meow-esc-delay 0.001)
  (meow-thing-register 'angle
                     '(pair ("<") (">"))
                     '(pair ("<") (">")))
  (add-to-list 'meow-char-thing-table
               '(?h . angle))

  (setq meow-select-on-change nil
        meow-beacon-auto-deactivate t)

  (meow-setup)
  (meow-setup-indicator)
  (unless (bound-and-true-p meow-global-mode)
    (meow-global-mode 1))
#+end_src

** Use shorten indicators

#+begin_src emacs-lisp
  (setq meow-replace-state-name-list
        '((normal . "N")
          (beacon . "B")
          (insert . "I")
          (motion . "M")
          (keypad . "K")))
#+end_src

** Allow all C-x <letter> for leader

#+begin_src emacs-lisp
  (setq meow-keypad-leader-dispatch "C-x")
#+end_src

** Tree-sitter integration

#+begin_src emacs-lisp
  (straight-use-package 'meow-tree-sitter)

  (require 'meow-tree-sitter)

  (defvar meomacs--register-tree-sitter-run-once nil)
  (unless meomacs--register-tree-sitter-run-once
    (meow-tree-sitter-register-defaults)
    (setq meomacs--register-tree-sitter-run-once t))
#+end_src

* Workspace management


* Auto pairs

** Builtin electric pair

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-local-mode)
  (add-hook 'conf-mode-hook 'electric-pair-local-mode)
#+end_src

* Line numbers with display-line-numbers-mode

#+begin_src emacs-lisp
  (keymap-set global-map "C-x N" 'display-line-numbers-mode)
#+end_src

** Relative line number

#+begin_src emacs-lisp
  (setq display-line-numbers-type t)
#+end_src

* Minibuffer completion reading
** IComplete

#+begin_src emacs-lisp
  (require 'icomplete)
  (fido-mode 1)

  (keymap-set icomplete-minibuffer-map "RET" 'icomplete-force-complete-and-exit)
  (keymap-set icomplete-minibuffer-map "TAB" 'icomplete-force-complete)
#+end_src

* Completion at point

** Company

#+begin_src emacs-lisp
  (straight-use-package 'company)

  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'conf-mode-hook 'company-mode)
  (add-hook 'comint-mode-hook 'company-mode)
  (autoload 'company-mode "company" nil t)

  (setq company-format-margin-function 'company-text-icons-margin
        company-dabbrev-downcase nil
        company-idle-delay 0.1)

  (with-eval-after-load 'company
    (diminish 'company-mode))
#+end_src

A setup for vim-like behavior.  Completion will popup automatically, =SPC= and =RET= will do insertion even though the popup is available.

| action                      | key |
|-----------------------------+-----|
| trigger completion at point | M-n |
| previous candidate          | M-p |
| next candidate              | M-n |
| next template placeholder   | RET |

#+begin_src emacs-lisp
  (with-eval-after-load "company"
    (require 'company-tng)

    (add-hook 'company-mode-hook 'company-tng-mode)

    (keymap-set company-active-map "TAB" nil)
    (define-key company-active-map [tab] nil)
    (keymap-set company-active-map "C-n" nil)
    (keymap-set company-active-map "C-p" nil)
    (keymap-set company-active-map "M-n" 'company-select-next)
    (keymap-set company-active-map "M-p" 'company-select-previous)

    ;; Free SPC and RET, popup will no longer interrupt typing.
    (define-key company-active-map [escape] nil)
    (define-key company-active-map [return] nil)
    (keymap-set company-active-map "RET" nil)
    (keymap-set company-active-map "SPC" nil))
#+end_src

** Backends

#+begin_src emacs-lisp
  (setq-default company-backends
        '(company-capf
          company-files
          company-ctags
          company-dabbrev-code
          company-keywords
          company-dabbrev))
#+end_src

** Ctags

#+begin_src emacs-lisp
  (straight-use-package 'company-ctags)

  (require 'company-ctags)
#+end_src

* Templating

** yasnippet

Expand template with =TAB=. Jump between the placeholders with =TAB= and =S-TAB=.

#+begin_src emacs-lisp
  (straight-use-package 'yasnippet)

  (require 'yasnippet)

  (yas-global-mode 1)

  (diminish 'yas-minor-mode)
#+end_src

* Project management

** project.el

To find files/buffers and apply commands on project, use builtin package ~project~.

#+begin_src emacs-lisp
  (straight-use-package 'project)
  (require 'project)

  (setq project-switch-commands '((project-find-file "Find file")
                                  (project-find-regexp "Find regexp")
                                  (project-dired "Dired")
                                  (project-eshell "Eshell")
                                  (eat-project-other-window "Eat")
                                  (magit-project-status "Magit")
                                  (shell "Shell")))

  (defalias 'project-prefix-map project-prefix-map)

  (define-key mode-specific-map "p" 'project-prefix-map)

  (with-eval-after-load "project"
    (define-key project-prefix-map "d" 'project-dired)
    (define-key project-prefix-map "s" 'eat-project-other-window)
    (define-key project-prefix-map "m" 'magit-project-status))
#+end_src

* Dired configuration

#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src

* Text searching

** rg.el

#+begin_src emacs-lisp
  (straight-use-package 'rg)

  (autoload 'rg-project "wgrep" nil t)
  (autoload 'rg-project "rg" nil t)

  (with-eval-after-load "rg"
    (rg-enable-default-bindings)
    ;; (rg-enable-menu)
    )

  (with-eval-after-load "wgrep"
    (define-key wgrep-mode-map (kbd "C-c C-c") #'wgrep-finish-edit))

  (define-key project-prefix-map "r" 'rg-project)
#+end_src

* Wrap parentheses
#+begin_src emacs-lisp
  (setq meomacs-wrap-keymap
        (let ((map (make-keymap)))
          (suppress-keymap map)
          (dolist (k '("(" "[" "{" "<"))
            (define-key map k #'insert-pair))
          map))
#+end_src

* TUI Copy
#+begin_src emacs-lisp
  (defun ext-copy (text)
    (cond
     ((string-match-p ".*WSL2" operating-system-release)
      (let ((inhibit-message t)
            (coding-system-for-write 'gbk-dos))
        (with-temp-buffer
          (insert text)
          (call-process-region (point-min) (point-max) "clip.exe" nil 0))))

     ((not window-system)
      (let ((inhibit-message t))
        (with-temp-buffer
          (insert text)
          (call-process-region (point-min) (point-max) "wl-copy" nil 0))))))

  (unless window-system
    (setq interprogram-cut-function 'ext-copy))
#+end_src

* Load variable values from varibale table

#+header: :var var-table=private.org:var-table
#+begin_src emacs-lisp
  (defun meomacs-read-var (key)
     (let* ((item (alist-get key var-table nil nil 'equal))
            (entry (cadr item))
            (where (car item)))
       (message "item %s entry %s where %s"
                item entry where)
       (cond
        ((string-equal where "pass")
         (password-store-get entry))

        ((string-equal where "env")
         (getenv entry)))))
#+end_src

* Common settings for transient

#+begin_src emacs-lisp
  (straight-use-package 'transient)

  (with-eval-after-load "transient"
    (keymap-set transient-map "<escape>" 'transient-quit-one))
#+end_src

* Don't display VC information in mode-line

#+begin_src emacs-lisp
  (setq vc-display-status 'no-backend)
#+end_src

* Repeat mode

#+begin_src emacs-lisp
  (repeat-mode 1)

  (with-eval-after-load "dired"
    (keymap-unset dired-jump-map "j"))

  (keymap-unset next-error-repeat-map "n")
  (keymap-unset next-error-repeat-map "p")
#+end_src

* Duplicate lines
#+begin_src emacs-lisp
  (keymap-set global-map "C-c d" 'duplicate-dwim)

  (defvar-keymap duplicate-dwim-repeat-map
    :doc "Keymap to repeat `duplicate-dwim'.  Used in `repeat-mode'."
    :repeat t
    "d"   #'duplicate-dwim)
#+end_src

* BEdit
#+begin_src emacs-lisp

  (straight-use-package '(bedit :host github
                                :repo "DogLooksGood/bedit"))

  (require 'bedit)

  (keymap-set global-map "C-M-g" bedit-prefix-map)
#+end_src
