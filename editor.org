#+title: Editor Basics

Configuration for editor basics.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Package management                                               :required:

** Straight

Straight.el is used for package management.
Bind some keys for quick operations.

#+begin_src emacs-lisp
  (defvar straight-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap "c" 'straight-check-package)
      (define-key keymap "C" 'straight-check-all)
      (define-key keymap "p" 'straight-pull-package)
      (define-key keymap "P" 'straight-pull-all)
      (define-key keymap "b" 'straight-rebuild-package)
      (define-key keymap "B" 'straight-rebuild-all)
      keymap))

  (defalias 'straight-keymap straight-keymap)
  (global-set-key (kbd "C-c P") 'straight-keymap)
#+end_src

* Better defaults

#+begin_src emacs-lisp
  (setq-default

   inhibit-startup-screen t
   ;; Don't display comp warnings
   warning-suppress-log-types '((comp))
   ;; Don't create lockfiles
   create-lockfiles nil

   ;; prefer UTF8
   buffer-file-coding-system 'utf-8-unix
   default-file-name-coding-system 'utf-8-unix
   default-keyboard-coding-system 'utf-8-unix
   default-process-coding-system '(utf-8-unix . utf-8-unix)
   default-sendmail-coding-system 'utf-8-unix
   default-terminal-coding-system 'utf-8-unix

   ;; Add newline at bottom of file
   require-final-newline t

   ;; Backup setups
   ;; We use temporary directory /tmp for backup files
   ;; More versions should be saved
   backup-directory-alist `((".*" . ,temporary-file-directory))
   auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t

   ;; Skip prompt for xref find definition
   xref-prompt-for-identifier nil

   ;; Don't wait for keystrokes display
   echo-keystrokes 0.01

   ;; Disable margin for overline and underline
   overline-margin 0
   underline-minimum-offset 0

   ;; Allow resizing frame by pixels
   frame-resize-pixelwise t

   ;; Better scroll behavior
   mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))
   mouse-wheel-progressive-speed nil

   ;; Disable copy region blink
   copy-region-blink-delay 0

   ;; Use short answer when asking yes or no
   read-answer-short t

   ;; Always follow link
   vc-follow-symlinks t

   ;; Use custom.el as custom file
   custom-file (expand-file-name "custom.el" user-emacs-directory)

   ;; Disable ring bell
   ring-bell-function 'ignore

   ;; Mouse yank at current point
   mouse-yank-at-point t

   ;; DWIM target for dired
   ;; Automatically use another dired buffer as target for copy/rename
   dired-dwim-target t

   ;; Use spaces instead of tab
   indent-tabs-mode nil

   ;; Don't echo multiline eldoc
   eldoc-echo-area-use-multiline-p nil)

  (show-paren-mode -1)

  (global-subword-mode 1)
  (diminish 'subword-mode)

  (global-hl-line-mode t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Meow

This configuration sticks with Meow for modal editing.

Key bindings are defined in [[file:private.org::#Modal Editing Key Binding][private]] config.

#+begin_src emacs-lisp
  (straight-use-package 'meow)

  (require 'meow)

  ;; hide lighters
  (diminish 'meow-normal-mode)
  (diminish 'meow-motion-mode)
  (diminish 'meow-insert-mode)
  (diminish 'meow-keypad-mode)
  (diminish 'meow-beacon-mode)

  ;; custom indicator
  (when window-system
    (setq meow-replace-state-name-list
          '((normal . "üÖù")
            (beacon . "üÖë")
            (insert . "üÖò")
            (motion . "üÖú")
            (keypad . "üÖö"))))

  ;; custom variables
  (setq meow-esc-delay 0.001)

  (meow-thing-register 'angle
                     '(pair ("<") (">"))
                     '(pair ("<") (">")))

  (add-to-list 'meow-char-thing-table
               '(?a . angle))

  (add-to-list 'meow-mode-state-list
               '(cargo-process-mode . motion))

  (meow-setup)

  (meow-setup-indicator)

  (unless (bound-and-true-p meow-global-mode)
    (meow-global-mode 1))
#+end_src

* Window management

Switch window by pressing the number showned in the mode line.

#+begin_src emacs-lisp
  (straight-use-package '(window-numbering
                          :repo "DogLooksGood/window-numbering.el"
                          :host github
                          :type git))


  (require 'window-numbering)
  (window-numbering-mode 1)

  (defun meomacs-window-numbering-modeline ()
    (concat " "
            (let ((n (window-numbering-get-number)))
              (if window-system
                  (alist-get
                   n
                   '((0 . "‚ì™")
                     (1 . "‚ë†")
                     (2 . "‚ë°")
                     (3 . "‚ë¢")
                     (4 . "‚ë£")
                     (5 . "‚ë§")
                     (6 . "‚ë•")
                     (7 . "‚ë¶")
                     (8 . "‚ëß")
                     (9 . "‚ë®")))
                (number-to-string n)))))

  (setq window-numbering-assign-func
        (lambda ()
          (when (string-prefix-p " *Treemacs"
                                 (buffer-name))
            9)))

  (let ((modeline-segment '(:eval (meomacs-window-numbering-modeline))))
    (unless (member modeline-segment mode-line-format)
      (setq-default mode-line-format (cons modeline-segment mode-line-format))))
#+end_src


** golden-ratio
#+begin_src emacs-lisp
  (straight-use-package 'golden-ratio)

  (define-key mode-specific-map "\\" 'golden-ratio)

  (autoload 'golden-ratio "golden-ratio" nil t)
#+end_src

** ace-window
#+begin_src emacs-lisp
  (straight-use-package 'ace-window)

  (define-key mode-specific-map "W" 'ace-swap-window)
  (define-key mode-specific-map "q" 'ace-delete-window)

  (autoload 'ace-swap-window "ace-window" nil t)
  (autoload 'ace-delete-other-window "ace-window" nil t)
#+end_src

* Workspace management

** Using frames

Use frames for workspaces.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c j") 'select-frame-by-name)

  ;; Better to have title name with project name
  (setq-default frame-title-format
                '((:eval
                   (or (cdr (project-current))
                       (buffer-name)))))
#+end_src

** COMMENT Using tab-bar-mode

Use tabs for workspaces.

#+begin_src emacs-lisp
  (defun meomacs-format-tab (tab i)
    (let ((current-p (eq (car tab) 'current-tab)))
      (concat
       (propertize (concat
                    " "
                    (alist-get 'name tab)
                    " ")
                   'face
                   (funcall tab-bar-tab-face-function tab))
       " ")))

  (setq tab-bar-border nil
        tab-bar-close-button nil
        tab-bar-new-button (propertize " üû§ " 'display '(:height 2.0))
        tab-bar-back-button nil
        tab-bar-tab-name-format-function 'meomacs-format-tab
        tab-bar-tab-name-truncated-max 10)

  (tab-bar-mode 1)

  (global-set-key (kbd "C-c j") 'tab-bar-switch-to-tab)
#+end_src

Add missing keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x t .") 'tab-bar-rename-tab)
#+end_src

* Auto pairs

** Builtin electric pair

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-local-mode)
  (add-hook 'conf-mode-hook 'electric-pair-local-mode)
#+end_src

** COMMENT Smartparens

Use smartparens for auto pairs, toggle strict mode with =C-c t s=.

#+begin_src emacs-lisp
  (straight-use-package 'smartparens)

  (require 'smartparens)

  (add-hook 'prog-mode-hook 'smartparens-mode)
  (add-hook 'conf-mode-hook 'smartparens-mode)

  (setq sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil)

  (with-eval-after-load "smartparens"

    ;; setup for emacs-lisp
    (sp-with-modes '(emacs-lisp-mode)
      (sp-local-pair "'" nil :actions nil))

    ;; Use strict-mode by default
    (add-hook 'smartparens-mode-hook 'smartparens-strict-mode)

    ;; Keybindings
    (define-key toggle-map "s" 'smartparens-strict-mode))
#+end_src

* Line numbers with display-line-numbers-mode

#+begin_src emacs-lisp
  (define-key toggle-map "l" 'display-line-numbers-mode)
#+end_src


* Completion for key sequence

** Which-key
#+begin_src emacs-lisp
  (straight-use-package 'which-key)
  (which-key-mode 1)

  (with-eval-after-load "which-key"
    (diminish 'which-key-mode))
#+end_src

* Minibuffer completion reading
** Vertico & Orderless

- Vertico provides a better UX for completion reading.
- Use prescient to support fuzzy search

#+begin_src emacs-lisp
  (straight-use-package '(vertico :files (:defaults "extensions/*")))
  (straight-use-package 'prescient)
  (straight-use-package 'vertico-prescient)

  (require 'vertico)
  (require 'vertico-prescient)

  (vertico-mode 1)
  (vertico-prescient-mode 1)
  (prescient-persist-mode 1)
#+end_src

** COMMENT Selectrum & Precient

#+begin_src emacs-lisp
  (straight-use-package 'selectrum)
  (straight-use-package 'selectrum-prescient)

  (selectrum-mode 1)
  (selectrum-prescient-mode 1)
  (prescient-persist-mode 1)
#+end_src

** Fix M-DEL in minibuffer

Do "delete" instead of "kill" when pressing =M-DEL=.

#+begin_src emacs-lisp
  (defun meomacs-backward-delete-sexp ()
    "Backward delete sexp.

  Used in minibuffer, replace the the default kill behavior with M-DEL."
    (interactive)
    (save-restriction
      (narrow-to-region (minibuffer-prompt-end) (point-max))
      (delete-region
       (save-mark-and-excursion
         (backward-sexp)
         (point))
       (point))))

  (define-key minibuffer-local-map (kbd "M-DEL") #'meomacs-backward-delete-sexp)
#+end_src

* Completion at point

** Company

#+begin_src emacs-lisp
  (straight-use-package 'company)

  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'conf-mode-hook 'company-mode)
  (autoload 'company-mode "company" nil t)

  (with-eval-after-load "company"
    (diminish 'company-mode))
#+end_src

A setup for vim-like behavior.  Completion will popup automatically, =SPC= and =RET= will do insertion even though the popup is available.

| action                      | key |
|-----------------------------+-----|
| trigger completion at point | TAB |
| previous candidate          | M-p |
| next candidate              | M-n |
| next template placeholder   | RET |

#+begin_src emacs-lisp
  (with-eval-after-load "company"
    (require 'company-tng)

    (add-hook 'company-mode-hook 'company-tng-mode)

    (define-key company-mode-map (kbd "M-n") 'company-complete-common)

    (define-key company-active-map (kbd "TAB") nil)
    (define-key company-active-map [tab] nil)
    (define-key company-active-map (kbd "C-n") nil)
    (define-key company-active-map (kbd "C-p") nil)
    (define-key company-active-map (kbd "M-n") 'company-select-next)
    (define-key company-active-map (kbd "M-p") 'company-select-previous)

    ;; Free SPC and RET, popup will no longer interrupt typing.
    (define-key company-active-map [escape] nil)
    (define-key company-active-map [return] nil)
    (define-key company-active-map (kbd "RET") nil)
    (define-key company-active-map (kbd "SPC") nil))
#+end_src

* Templating

** yasnippet

Expand template with =TAB=. Jump between the placeholders with =TAB= and =S-TAB=.

#+begin_src emacs-lisp
  (straight-use-package 'yasnippet)
  (straight-use-package 'yasnippet-snippets)

  (require 'yasnippet)

  (yas-global-mode 1)

  (diminish 'yas-minor-mode)
#+end_src

* Project management

** project.el

To find files/buffers and apply commands on project, use builtin package ~project~.

#+begin_src emacs-lisp
  (when (version<= "28" emacs-version)
    (setq project-switch-commands '((project-find-file "Find file")
                                    (project-find-regexp "Find regexp")
                                    (project-dired "Dired")
                                    (project-eshell "Eshell")
                                    (shell "Shell")
                                    (magit "Magit")
                                    (treemacs-add-and-display-current-project "Treemacs")))

    (defalias 'project-prefix-map project-prefix-map)

    (define-key mode-specific-map "p" 'project-prefix-map)

    (with-eval-after-load "project"
      (define-key project-prefix-map "s" 'shell)
      (define-key project-prefix-map "m" 'magit)
      (define-key project-prefix-map "t" 'treemacs-add-and-display-current-project)))
#+end_src

* Enanced completion commands

** consult

#+begin_src emacs-lisp
  (straight-use-package 'consult)

  (require 'consult)

  (define-key mode-specific-map "G" 'consult-ripgrep)
#+end_src

* File Navigator

** treemacs

#+begin_src emacs-lisp
  (straight-use-package 'treemacs)

  (setq treemacs-is-never-other-window t)
#+end_src

* Text searching

** COMMENT deadgrep

#+begin_src emacs-lisp
  (straight-use-package 'deadgrep)

  (require 'deadgrep)

  (define-key project-prefix-map "r" 'deadgrep)
#+end_src

** rg.el

#+begin_src emacs-lisp
  (straight-use-package 'rg)

  (autoload 'rg-project "wgrep" nil t)
  (autoload 'rg-project "rg" nil t)

  (with-eval-after-load "wgrep"
    (define-key wgrep-mode-map (kbd "C-c C-c") #'wgrep-finish-edit))

  (define-key project-prefix-map "r" 'rg-project)
#+end_src
