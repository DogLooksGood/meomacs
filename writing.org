#+title: Writing

Configuration for writing with Emacs, specifically for Markdown and Org mode.

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
#+end_src

* Org
** Toggle markup visibility with visible mode
#+begin_src emacs-lisp
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c v") 'visible-mode))
#+end_src

** More TODO state changes

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)"))
        ;; LOGBOOK
        org-log-into-drawer t)
#+end_src

** Org Roam
#+begin_src emacs-lisp
  (straight-use-package 'org-roam)

  (setq org-roam-directory (expand-file-name "~/org/roam"))
  (setq org-roam-dailies-directory (expand-file-name "~/org/journal"))

  ;; Use gpg encryption for files
  (setq org-roam-capture-templates '(("d" "default" plain "%?"
       :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org.gpg"
                          "#+title: ${title}\n")
       :unnarrowed t)))

  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :target (file+head "%<%Y-%m-%d>.org.gpg"
                              "#+title: %<%Y-%m-%d>\n"))))


  (with-eval-after-load "org-roam"
    (org-roam-setup)
    (org-roam-db-autosync-mode))
#+end_src

*** Key bindings
#+tblname: org-roam-keymap-table
| Key | Command                         |
|-----+---------------------------------|
| l   | org-roam-buffer-toggle          |
| f   | org-roam-node-find              |
| g   | org-roam-graph                  |
| i   | org-roam-node-insert            |
| c   | org-roam-capture                |
| s   | org-roam-db-sync                |
| t   | org-roam-dailies-goto-today     |
| y   | org-roam-dailies-goto-yesterday |
| T   | org-roam-dailies-goto-tomorrow  |
| d   | org-roam-dailies-goto-date      |

#+header: :var org-roam-keymap-table=org-roam-keymap-table
#+begin_src emacs-lisp
  (meomacs-keymap-table org-roam-keymap org-roam-keymap-table)
  (keymap-set global-map "C-c r" 'org-roam-keymap)
#+end_src

*** A shortcut to create ID

#+begin_src emacs-lisp
  (keymap-set org-mode-map "C-c I" 'org-id-get-create)
#+end_src

*** Bigger GC threshold during sync.

#+begin_src emacs-lisp
  (setq org-roam-db-gc-threshold most-positive-fixnum)
#+end_src

** Good old template shortcut

#+begin_src emacs-lisp
  (with-eval-after-load "org"
    (require 'org-tempo))
#+end_src

** Using variable pitch font

Enable ~variable-pitch-mode~.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'variable-pitch-mode)

  (with-eval-after-load "org"
    ;; Use fixed pitch for table and code
    (custom-set-faces
     '(org-table ((t :inherit 'fixed-pitch-serif)))
     '(org-code ((t :inherit 'fixed-pitch-serif)))
     '(org-block ((t :inherit 'fixed-pitch-serif)))
     '(org-checkbox ((t :inherit 'fixed-pitch :background unspecified :box nil)))
     '(org-latex-and-related ((t (:inherit 'fixed-pitch-serif))))))
#+end_src

** Turn off some eye-candy stuff

#+begin_src emacs-lisp
  (setq org-fontify-quote-and-verse-blocks nil
        org-fontify-whole-heading-line nil
        org-hide-leading-stars nil
        org-hide-leading-stars-before-indent-mode nil
        org-startup-indented nil)
#+end_src

** Better structure indication with org-visual-outline

~org-visual-outline~ provides a better visual feedback for document structure.

#+begin_src emacs-lisp
  (straight-use-package '(org-visual-outline
                          :host github
                          :repo "legalnonsense/org-visual-outline"))

  (autoload 'org-visual-indent-mode "org-visual-indent")

  (add-hook 'org-mode-hook 'org-visual-indent-mode)
  (add-hook 'org-mode-hook 'org-dynamic-bullets-mode)
#+end_src

** Ricing markups

#+begin_src emacs-lisp
  (when window-system

    (defun meomacs--org-prettify-symbols ()
      (setq-local prettify-symbols-alist
                  '(("#+begin_src" . "¬ª")
                    ("#+end_src" . "¬´")
                    ("#+begin_example" . "‚ùØ")
                    ("#+end_example" . "‚ùÆ")
                    ("#+begin_quote" . "‚Äú")
                    ("#+end_quote" . "‚Äù")
                    ("[X]" . "‚¶ø")
                    ("[ ]" . "üûÖ")
                    ("[-]" . "‚¶æ")))
      (prettify-symbols-mode 1))

    (add-hook 'org-mode-hook 'meomacs--org-prettify-symbols)

    (setq org-hide-emphasis-markers t))
#+end_src

** Babel

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)

  (with-eval-after-load "org"
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (dot . t))))

  (defun meomacs-after-babel-execute ()
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))

  (add-hook 'org-babel-after-execute-hook 'meomacs-after-babel-execute)
#+end_src

** Latex
#+begin_src emacs-lisp
  (with-eval-after-load "org"
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 4.0)))
#+end_src

** Agenda

#+begin_src emacs-lisp
  (setq org-agenda-files (list (expand-file-name "~/org/agenda")))
#+end_src
* Markdown

#+begin_src emacs-lisp
  (straight-use-package 'markdown-mode)
  (straight-use-package 'edit-indirect)
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (with-eval-after-load "markdown-mode"
    (define-key markdown-mode-map (kbd "C-c v") 'markdown-toggle-markup-hiding))
#+end_src

* Uniline

Draw graphics with unicode

#+begin_src emacs-lisp
  (straight-use-package '(uniline :host github :repo "tbanel/uniline"))
#+end_src

** Trigger key

To finish draw, use =C-c C-c=.

#+begin_src emacs-lisp
  (keymap-set global-map "C-c t u" 'uniline-mode)
#+end_src

** Meow integration

#+tblname: uniline-keymap-table
| Key     | Command                   |
|---------+---------------------------|
| C-c SPC | uniline-hydra-choose-body |
| C-c -   | uniline--set-brush-1      |
| C-c +   | uniline--set-brush-2      |
| C-c =   | uniline--set-brush-3      |
| C-c #   | uniline--set-brush-block  |
| -       | nil                       |
| +       | nil                       |
| =       | nil                       |
| *       | nil                       |

#+header: :var uniline-keymap-table=uniline-keymap-table
#+begin_src emacs-lisp
  (with-eval-after-load "uniline"
    (meomacs-keymap-table uniline-mode-map uniline-keymap-table))
#+end_src
