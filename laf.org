#+title: Look & Feel

Configuration for look and feels, make UI looks better.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Disabling some components

No tool bar & menu bar.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

No scroll bars in minibuffer.

#+begin_src emacs-lisp
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (set-window-scroll-bars
               (minibuffer-window frame) 0 nil 0 nil t)))
#+end_src

* Some UI related variables

#+begin_src emacs-lisp
  (setq x-underline-at-descent-line t)
#+end_src

* Fonts

** Font resizing
Increasing/decreasing font size with =M-+= / =M--=.

#+begin_src emacs-lisp
  (require 'cl-lib)

  (defvar meomacs-font-size 11
    "Current font size.")

  (defvar meomacs-resize-font-sizes
    '(7 8 9 10 11 12 13 14 15 16)
    "Font sizes for resizing.")

  (defun meomacs-increase-font-size ()
    (interactive)
    (if-let ((size (cl-find-if (lambda (s)
                                 (> s meomacs-font-size))
                               meomacs-resize-font-sizes)))
        (progn (setq meomacs-font-size size)
               (meomacs-load-base-font)
               (meomacs-load-face-font)
               (meomacs-load-ext-font)
               (message "Font size: %s" size))
      (message "Using biggest font size.")))

  (defun meomacs-decrease-font-size ()
    (interactive)
    (if-let ((size (cl-find-if (lambda (s)
                                 (< s meomacs-font-size))
                               (reverse meomacs-resize-font-sizes))))
        (progn (setq meomacs-font-size size)
               (meomacs-load-base-font)
               (meomacs-load-face-font)
               (meomacs-load-ext-font)
               (message "Font size: %s" size))
      (message "Using smallest font size.")))

  (global-set-key (kbd "M-+") 'meomacs-increase-font-size)
  (global-set-key (kbd "M--") 'meomacs-decrease-font-size)
#+end_src

** Font Families

Define functions for loading fonts.
Font families are specified in [[file:private.org::Fonts][private]] config.

#+begin_src emacs-lisp
  (defvar meomacs-fonts '((default . "MesloLGL Nerd Font")
                          (unicode . "LXGW WenKai")
                          (modeline . "Source Serif Pro")
                          (fixed . "Sarasa Mono SC")
                          (variable . "ETBembo"))
    "Fonts to use.")

  (defun meomacs--get-font-family (key)
    (alist-get key meomacs-fonts))

  (defun meomacs--get-font-spec (key)
    (format "%s-%d"
            (meomacs--get-font-family key)
            meomacs-font-size))

  (defun meomacs-load-base-font ()
    "Load the default font for ascii characters."
    (let* ((font-spec (meomacs--get-font-spec 'default)))
      (set-frame-parameter nil 'font font-spec)
      (add-to-list 'default-frame-alist (cons 'font font-spec))))

  (defun meomacs-load-face-font ()
    "Load fonts used in faces.

  This function must be called after frame creation."
    (let ((modeline-font-spec (meomacs--get-font-spec 'modeline))
          (variable-font-spec (meomacs--get-font-spec 'variable))
          (fixed-font-spec (meomacs--get-font-spec 'fixed)))
      (set-face-attribute 'variable-pitch nil :font variable-font-spec :height 1.1)
      (set-face-attribute 'fixed-pitch nil :font fixed-font-spec)
      (set-face-attribute 'fixed-pitch-serif nil :font fixed-font-spec)
      (set-face-attribute 'mode-line nil :font modeline-font-spec)
      (set-face-attribute 'mode-line-inactive nil :font modeline-font-spec)
      (set-face-attribute 'tab-bar nil :font modeline-font-spec)))

  (defun meomacs-load-ext-font ()
    "Load fonts used for non-ascii characters.

  This function must be called after frame creation."
    (let ((font (frame-parameter nil 'font))
          (font-spec (font-spec :family (meomacs--get-font-family 'unicode))))
      (dolist (charset '(kana han hangul cjk-misc bopomofo symbol))
        (set-fontset-font font charset font-spec))))

  (meomacs-load-base-font)

  (add-hook 'after-init-hook
            (lambda ()
              (when window-system
                (meomacs-load-ext-font)
                (meomacs-load-face-font))))
#+end_src

* Themes

Create a command ~meomacs-next-theme~ at =C-c t t= to switch themes.

#+begin_src emacs-lisp
  (require 'subr-x)
  (require 'cl-lib)

  (defvar meomacs-themes '(modus-operandi modus-vivendi)
    "Themes to use.")

  (defun meomacs-load-theme ()
    (when-let ((theme (car meomacs-themes)))
      (message "Load theme: %s" (car meomacs-themes))
      (mapc 'disable-theme custom-enabled-themes)
      (load-theme theme t)
      (meomacs-load-face-font)))

  (defun meomacs-next-theme ()
    (interactive)
    (when meomacs-themes
      (setq meomacs-themes (append (cdr meomacs-themes) (list (car meomacs-themes))))
      (meomacs-load-theme)))

  (define-key toggle-map "t" 'meomacs-next-theme)

  (add-hook 'desktop-after-read-hook 'meomacs-load-theme)
#+end_src

* Modeline

** COMMENT telephone-line
#+begin_src emacs-lisp
  (straight-use-package 'telephone-line)

  (telephone-line-mode 1)
#+end_src

** mood-line
#+begin_src emacs-lisp
  (straight-use-package 'mood-line)

  (require 'mood-line)
  (mood-line-mode 1)
#+end_src
