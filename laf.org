#+title: Look & Feel

Configuration for look and feels, make UI looks better.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Disabling some components

No tool bar & menu bar.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

No scroll bars in minibuffer.

#+begin_src emacs-lisp
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (set-window-scroll-bars
               (minibuffer-window frame) 0 nil 0 nil t)))
#+end_src

* Enable window divider
#+begin_src emacs-lisp
  (window-divider-mode 1)
#+end_src

* Some UI related variables

#+begin_src emacs-lisp
  (setq x-underline-at-descent-line t)
#+end_src

* Fonts

** Font Families

Define functions for loading fonts.
Font families are specified in [[file:private.org::Fonts][private]] config.

#+begin_src emacs-lisp
  (defvar meomacs-font-size 12
    "Current font size.")

  (defvar meomacs-fonts '((default . "Monospace")
                          (cjk . "Unifont")
                          (symbol . "Unifont")
                          (fixed . "Monospace")
                          (fixed-serif . "Monospace Serif")
                          (variable . "Sans Serif"))
    "Fonts to use.")

  (defun meomacs--get-font-family (key)
    (alist-get key meomacs-fonts))

  ;; Set default font before frame creation
  ;; to make sure the first frame have the correct size
  ;; (add-to-list 'default-frame-alist (cons 'font (format "%s-%s"
  ;;                                                       (meomacs--get-font-family 'default)
  ;;                                                       meomacs-font-size)))
  ;; (set-frame-font (format "%s-%s" (meomacs--get-font-family 'default) meomacs-font-size))

  (defun meomacs-load-font ()
    "Load font configuration."
    (let ((default-font (format "%s-%s"
                                (meomacs--get-font-family 'default)
                                meomacs-font-size))
          (cjk-font (meomacs--get-font-family 'cjk))
          (symbol-font (meomacs--get-font-family 'symbol))
          (variable-font (meomacs--get-font-family 'variable))
          (fixed-font (meomacs--get-font-family 'fixed))
          (fixed-serif-font (meomacs--get-font-family 'fixed-serif)))
      (set-frame-font default-font)
      (let ((fontset (create-fontset-from-ascii-font default-font)))
        ;; Fonts for charsets
        (dolist (charset '(kana han hangul cjk-misc bopomofo))
          (set-fontset-font fontset charset cjk-font))
        (set-fontset-font fontset 'symbol symbol-font)
        ;; Apply fontset
        (set-frame-parameter nil 'font fontset)
        (add-to-list 'default-frame-alist (cons 'font fontset))
        ;; Fonts for faces
        (set-face-attribute 'variable-pitch nil :family variable-font :height 1.0)
        (set-face-attribute 'fixed-pitch nil :family fixed-font :height 1.0)
        (set-face-attribute 'fixed-pitch-serif nil :family fixed-serif-font :height 1.0))))

  (when window-system
    (meomacs-load-font))

  ;; Run after startup
  (add-hook 'after-init-hook
            (lambda ()
              (when window-system
                (meomacs-load-font))))
#+end_src

* Themes

Create a command ~meomacs-next-theme~ at =C-c t t= to switch themes.

#+begin_src emacs-lisp
  (require 'subr-x)
  (require 'cl-lib)

  (defvar meomacs-themes '()
    "Themes to use.")

  (defun meomacs-load-theme ()
    (when-let ((theme (car meomacs-themes)))
      (message "Load theme: %s" (car meomacs-themes))
      (mapc 'disable-theme custom-enabled-themes)
      (unless (eq theme 'default)
        (load-theme theme t))))

  (defun meomacs-next-theme ()
    (interactive)
    (when meomacs-themes
      (setq meomacs-themes (append (cdr meomacs-themes) (list (car meomacs-themes))))
      (meomacs-load-theme)))

  (define-key toggle-map "t" 'meomacs-next-theme)

  (add-hook 'desktop-after-read-hook 'meomacs-load-theme)
#+end_src

* Modeline

** Use variable font

#+begin_src emacs-lisp
  (custom-set-faces
   '(mode-line ((t :inherit variable-pitch)))
   '(mode-line-inactive ((t :inherit variable-pitch))))
#+end_src

** Diminish
Hide unnecessary lighters.
#+begin_src emacs-lisp
  (straight-use-package 'diminish)

  (require 'diminish)
  (diminish 'which-key-mode)
  (diminish 'company-mode)
  (diminish 'buffer-face-mode)
  (diminish 'yas-minor-mode)
  (diminish 'gcmh-mode)
  (diminish 'meow-normal-mode)
  (diminish 'meow-motion-mode)
  (diminish 'meow-insert-mode)
  (diminish 'meow-keypad-mode)
  (diminish 'meow-beacon-mode)
  (diminish 'subword-mode)
  (diminish 'eldoc-mode)
#+end_src

** COMMENT mood-line
#+begin_src emacs-lisp
  (straight-use-package 'mood-line)

  (require 'mood-line)
  (mood-line-mode 1)
#+end_src
