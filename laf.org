#+title: Look & Feel

Configuration for look and feels, make UI looks better.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Disabling some components
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

* Fonts

** Font resizing
Increasing/decreasing font size with =M-+= / =M--=.

#+begin_src emacs-lisp
  (require 'cl-lib)

  (defvar meomacs-font-size 11
    "Current font size.")

  (defvar meomacs-resize-font-sizes
    '(7 8 9 10 11 12 13 14 15 16)
    "Font sizes for resizing.")

  (defun meomacs-increase-font-size ()
    (interactive)
    (if-let ((size (cl-find-if (lambda (s)
                                 (> s meomacs-font-size))
                               meomacs-resize-font-sizes)))
        (progn (setq meomacs-font-size size)
               (meomacs-load-base-font)
               (meomacs-load-face-font)
               (meomacs-load-ext-font)
               (message "Font size: %s" size))
      (message "Using biggest font size.")))

  (defun meomacs-decrease-font-size ()
    (interactive)
    (if-let ((size (cl-find-if (lambda (s)
                                 (< s meomacs-font-size))
                               (reverse meomacs-resize-font-sizes))))
        (progn (setq meomacs-font-size size)
               (meomacs-load-base-font)
               (meomacs-load-face-font)
               (meomacs-load-ext-font)
               (message "Font size: %s" size))
      (message "Using smallest font size.")))

  (global-set-key (kbd "M-+") 'meomacs-increase-font-size)
  (global-set-key (kbd "M--") 'meomacs-decrease-font-size)
#+end_src

** Font Families
#+tblname: fonts
| key      | font                    | where to apply                        |
|----------+-------------------------+---------------------------------------|
| default  | MesloLGM Nerd Font Mono | default font for ascii characters     |
| unicode  | LXGW WenKai             | default font for non-ascii characters |
| modeline | Source Serif Pro        | modeline                              |
| fixed    | Sarasa Mono SC          | code blocks and tables in markups     |
| variable | ETBembo                 | texts in markups                      |

#+header: :var fonts=fonts
#+begin_src emacs-lisp
  (defun meomacs--get-font-family (key)
    (car (alist-get key fonts nil nil #'string-equal)))

  (defun meomacs--get-font-spec (key)
    (format "%s-%d"
	    (meomacs--get-font-family key)
	    meomacs-font-size))

  (defun meomacs-load-base-font ()
    "Load the default font for ascii characters."
    (let* ((font-spec (meomacs--get-font-spec "default")))
      (set-frame-parameter nil 'font font-spec)
      (add-to-list 'default-frame-alist (cons 'font font-spec))))

  (defun meomacs-load-face-font ()
    "Load fonts used in faces."
    (let ((modeline-font-spec (meomacs--get-font-spec "modeline"))
	  (variable-font-spec (meomacs--get-font-spec "variable"))
	  (fixed-font-spec (meomacs--get-font-spec "fixed")))
      (set-face-attribute 'variable-pitch nil :font variable-font-spec :height 1.1)
      (set-face-attribute 'fixed-pitch nil :font fixed-font-spec)
      (set-face-attribute 'fixed-pitch-serif nil :font fixed-font-spec)
      (set-face-attribute 'mode-line nil :font modeline-font-spec)
      (set-face-attribute 'mode-line-inactive nil :font modeline-font-spec)))

  (defun meomacs-load-ext-font ()
    "Load fonts used for non-ascii characters."
    (let ((font (frame-parameter nil 'font))
	  (font-spec (font-spec :family (meomacs--get-font-family "unicode"))))
      (dolist (charset '(kana han hangul cjk-misc bopomofo symbol))
	(set-fontset-font font charset font-spec))))

  ;; Only have font setup in GUI
  (meomacs-load-base-font)
#+end_src


* Themes

#+name: themes
- [X] modus-operandi
- [X] deeper-blue
- [ ] modus-vivendi

Create a command ~meomacs-next-theme~ at =C-c t t= to switch themes between listed above.

#+header: :var themes=themes
#+begin_src emacs-lisp
  (require 'subr-x)
  (require 'cl-lib)

  (defvar meomacs-themes nil
    "Themes to use.")

  (setq meomacs-themes
        (thread-last
          themes
          (mapcar 'car)
          (cl-remove-if-not (lambda (s) (string-prefix-p "[X] " s)))
          (mapcar (lambda (s) (intern (substring s 4))))))

  (defun meomacs-next-theme ()
    (interactive)
    (mapc 'disable-theme custom-enabled-themes)
    (when meomacs-themes
      (message "Load theme: %s" (car meomacs-themes))
      (load-theme (car meomacs-themes) t)
      (setq meomacs-themes (append (cdr meomacs-themes) (list (car meomacs-themes))))
      (meomacs-load-face-font)))

  (global-set-key (kbd "C-c t t") 'meomacs-next-theme)

  (unless custom-enabled-themes
    (meomacs-next-theme))
#+end_src

