#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Stick scroll
#+begin_src emacs-lisp
  (straight-use-package
   '(topsy :host github :repo "alphapapa/topsy.el"))

  (define-key toggle-map "s" 'topsy-mode)
#+end_src

* Force save file
#+begin_src emacs-lisp
  (defun save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

  (global-set-key (kbd "<f5>") 'save-buffer-always)
  (global-set-key (kbd "C-c y") 'save-buffer-always)
#+end_src

* Flycheck

#+begin_src emacs-lisp
  (straight-use-package 'flycheck)
#+end_src

* Outline
#+begin_src emacs-lisp
  (straight-use-package 'imenu-list)

  (require 'imenu-list)

  (define-key toggle-map "i" 'imenu-list)
#+end_src

* COMMENT Tree-sitter

#+begin_src emacs-lisp
  (straight-use-package 'tree-sitter)
  (straight-use-package 'tree-sitter-langs)

  (require 'tree-sitter)
  (require 'tree-sitter-langs)
#+end_src

* LSP

** COMMENT lspce

Use lspce as LSP client.

#+begin_src emacs-lisp
  (straight-use-package '(lspce :host github
                                :repo "zbelial/lspce"
                                :files (:defaults "lspce-module.so")
                                :pre-build (("cargo" "build" "--release")
                                            ("cp" "./target/release/liblspce_module.so" "./lspce-module.so"))))

  (autoload 'lspce-mode "lspce" nil t)

  (with-eval-after-load "lspce"
    (define-key lspce-mode-map (kbd "C-c l r") 'lspce-rename)
    (define-key lspce-mode-map (kbd "C-c l a") 'lspce-code-actions)
    (define-key lspce-mode-map (kbd "C-c l h") 'lspce-help-at-point))
#+end_src

*** Key binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'lspce-mode)
#+end_src

** lsp-mode

Use lsp-mode as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'lsp-mode)

  (setq lsp-keymap-prefix "C-c l"
        lsp-enable-symbol-highlighting nil
        lsp-enable-dap-auto-configure nil
        lsp-lens-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-signature-doc-lines 3)

  (autoload 'lsp "lsp-mode" nil t)

  (with-eval-after-load "lsp-mode"
    (add-hook 'rust-mode-hook 'lsp)
    (add-hook 'typescript-ts-mode-hook 'lsp)
    (define-key lsp-mode-map (kbd "<C-return>") 'lsp-execute-code-action)
    (define-key lsp-mode-map (kbd "C-c C-f") 'lsp-format-buffer))
#+end_src

*** Key binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'lsp)
#+end_src

** COMMENT Eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'eglot)

  (autoload 'eglot "eglot" nil t)

  (setq eglot-confirm-server-initiated-edits nil)

  (with-eval-after-load "eglot"
    (define-key eglot-mode-map (kbd "<C-return>") 'eglot-code-actions))
#+end_src

*** Key Binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'eglot)
#+end_src

* Clojure

** clojure-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-mode)

  (setq clojure-toplevel-inside-comment-form t)

  (add-hook 'clojure-mode-hook 'lsp)

  (with-eval-after-load "clojure-mode"
    (define-clojure-indent
      (re-frame/reg-event-fx :defn)
      (re-frame/reg-event-db :defn)
      (re-frame/reg-sub :defn)
      (re-frame/reg-fx :defn)
      (t/async :defn)
      (thrown-with-msg? :defn)))
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
  (straight-use-package 'cider)

  (autoload 'cider-jack-in "cider" nil t)

  (setq cider-offer-to-open-cljs-app-in-browser nil)

  (with-eval-after-load "cider"
    (define-key cider-mode-map (kbd "C-c C-f") 'cider-format-buffer))
#+end_src

** Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
  (straight-use-package 'flycheck-clj-kondo)

  (with-eval-after-load "clojure-mode"
    (require 'flycheck-clj-kondo))

  (add-hook 'clojure-mode-hook 'flycheck-mode)
#+end_src

** COMMENT Format code with zprint

#+begin_src emacs-lisp
  (straight-use-package '(zprint :type git
                                 :host github
                                 :repo "DogLooksGood/zprint.el"))

  (autoload 'zprint "zprint" nil t)

  (with-eval-after-load "clojure-mode"
    (define-key clojure-mode-map (kbd "C-c C-f") 'zprint))
#+end_src

* Svelte
** svelte-mode
#+begin_src emacs-lisp
  (straight-use-package 'svelte-mode)
#+end_src

* Typescript

** typescript-mode
#+begin_src emacs-lisp
  (setq typescript-indent-level 2
        typescript-ts-mode-indent-offset 2)

  (if (version<= "29" emacs-version)
      (progn
        (add-to-list 'auto-mode-alist (cons "\\.ts\\'" 'typescript-ts-mode))
        (add-to-list 'auto-mode-alist (cons "\\.tsx\\'" 'tsx-ts-mode)))
    (setq tsx-mode-tsx-auto-tags t)
    (straight-use-package '(tsi :type git :host github :repo "orzechowskid/tsi.el"))
    (straight-use-package '(tsx-mode :type git :host github :repo "orzechowskid/tsx-mode.el" :branch "emacs28"))
    (add-to-list 'auto-mode-alist (cons "\\.tsx\\'" 'tsx-mode)))

  (setq lsp-typescript-preferences-quote-style "single"
        lsp-typescript-surveys-enabled nil
        lsp-typescript-format-enable nil)
#+end_src

* Lua
#+begin_src emacs-lisp
  (straight-use-package 'lua-mode)
#+end_src

* Rust
** cargo.el
#+begin_src emacs-lisp
  (straight-use-package 'cargo)

  (autoload 'cargo-minor-mode "cargo" nil t)

  (with-eval-after-load "cargo"
    (define-key cargo-process-mode-map (kbd "/") 'scroll-down-line)
    (define-key cargo-process-mode-map (kbd "@") 'scroll-up-line)
    (define-key cargo-process-mode-map (kbd "\\") 'toggle-truncate-lines))
#+end_src

** rust-mode
#+begin_src emacs-lisp
  (straight-use-package 'rust-mode)
  (with-eval-after-load "rust-mode"
    (add-hook 'rust-mode-hook 'cargo-minor-mode))

  (setq lsp-rust-analyzer-completion-add-call-parenthesis nil
        lsp-rust-analyzer-proc-macro-enable t)
#+end_src

Write a command to switch between wasm32 and native target triple.

#+begin_src emacs-lisp
  (defun rust-toggle-lsp-target ()
    (interactive)
    (require 'lsp-rust)
    (when
        (y-or-n-p (format "Current target is [%s], switch?"
                             (or lsp-rust-analyzer-cargo-target "default")))
      (if lsp-rust-analyzer-cargo-target
          (setq lsp-rust-analyzer-cargo-target nil
                cargo-process--command-check "check")
        (setq lsp-rust-analyzer-cargo-target "wasm32-unknown-unknown"
              cargo-process--command-check "check --target wasm32-unknown-unknown"))))

  (with-eval-after-load "rust-mode"
    (define-key rust-mode-map (kbd "C-c '") #'rust-toggle-lsp-target))
#+end_src

** COMMENT rustic-mode
#+begin_src emacs-lisp
  (straight-use-package 'rustic)
#+end_src

* Nix

#+begin_src emacs-lisp
  (straight-use-package 'nix-mode)
  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+end_src

* Restclient
#+begin_src emacs-lisp
  (straight-use-package 'restclient)
  (add-to-list 'auto-mode-alist '("\\.restclient" . restclient-mode))
#+end_src

* HTML
#+begin_src emacs-lisp
  (straight-use-package '(htmlz
                          :type git
                          :host github
                          :repo "ezekiiel/htmlz-mode"))

  (straight-use-package 'websocket)
#+end_src

#+begin_src emacs-lisp
  (setq-default css-indent-offset 2
                js-indent-level 2)
#+end_src

** Emmet
#+begin_src emacs-lisp
  (straight-use-package 'emmet-mode)

  (autoload 'emmet-expand-line "emmet-mode" nil t)

  (with-eval-after-load "mhtml-mode"
    (define-key mhtml-mode-map (kbd "M-RET") 'emmet-expand-line))

  (with-eval-after-load "svelte-mode"
    (define-key svelte-mode-map (kbd "M-RET") 'emmet-expand-line))
#+end_src

* Just

** Just-mode
#+begin_src emacs-lisp
  (straight-use-package 'just-mode)

  (defun +just-mode-hook ()
    (modify-syntax-entry ?- "_"))

  (add-hook 'just-mode-hook '+just-mode-hook)
#+end_src

** Justl
#+begin_src emacs-lisp
  (straight-use-package 'justl)

  (global-set-key (kbd "C-c j") 'justl-exec-recipe)

  (autoload 'justl-exec-recipe "justl" nil t)
#+end_src
