#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* LSP with lsp-mode

Use lsp-mode as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'lsp-mode)

  (setq lsp-keymap-prefix "C-c l"
        lsp-enable-symbol-highlighting nil
        lsp-enable-dap-auto-configure nil
        lsp-lens-enable nil
        lsp-headerline-breadcrumb-enable nil)

  (autoload 'lsp "lsp-mode" nil t)
#+end_src

* Clojure

** clojure-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-mode)
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
  (straight-use-package 'cider)

  (autoload 'cider-jack-in "cider" nil t)

  (with-eval-after-load "cider"
    (define-key cider-mode-map (kbd "C-c C-f") nil))
#+end_src

** Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
  (straight-use-package 'flycheck-clj-kondo)

  (add-hook 'clojure-mode-hook 'flycheck-mode)
#+end_src

** Format code with zprint

#+begin_src emacs-lisp
  (straight-use-package '(zprint :type git
                                 :host github
                                 :repo "DogLooksGood/zprint.el"))

  (autoload 'zprint "zprint" nil t)

  (with-eval-after-load "clojure-mode"
    (define-key clojure-mode-map (kbd "C-c C-f") 'zprint))
#+end_src

* Rust
** rust-mode
#+begin_src emacs-lisp
  (straight-use-package 'rust-mode)

  (add-hook 'rust-mode-hook 'lsp)
#+end_src

* HTML
#+begin_src emacs-lisp
  (setq-default css-indent-offset 2
                js-indent-level 2)
#+end_src


