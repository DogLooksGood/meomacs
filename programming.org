#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* LSP with Eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'eglot)

  (autoload 'eglot-ensure "eglot")
  (autoload 'eglot "eglot" nil t)

  (setq eglot-connect-timeout 300)
#+end_src

** Linting with Flymake

Eglot use flymake for linting.

#+begin_src emacs-lisp
  (straight-use-package 'flymake)

  (autoload #'flymake-mode "flymake" nil t)

  (with-eval-after-load "flymake"
    (define-key flymake-mode-map (kbd "C-c l l") 'flymake-show-diagnostics-buffer)
    (define-key flymake-mode-map (kbd "C-c l n") 'flymake-goto-next-error)
    (define-key flymake-mode-map (kbd "C-c l p") 'flymake-goto-prev-error))
#+end_src

* Clojure

** clojure-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-mode)
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
  (straight-use-package 'cider)

  (autoload 'cider-jack-in "cider" nil t)
#+end_src

** Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
  (straight-use-package 'flycheck-clj-kondo)

  (add-hook 'clojure-mode-hook 'flycheck-mode)
#+end_src

** Format code with zprint

#+begin_src emacs-lisp
  (straight-use-package '(zprint :type git
                                 :host github
                                 :repo "DogLooksGood/zprint.el"))

  (autoload 'zprint-mode "zprint" nil t)

  (with-eval-after-load "clojure-mode"
    (define-key clojure-mode-map (kbd "C-c C-f") 'zprint))
#+end_src

* HTML
#+begin_src emacs-lisp
  (setq-default css-indent-offset 2
                js-indent-level 2)
#+end_src


