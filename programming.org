#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Treesit

#+begin_src emacs-lisp
  (setq treesit-language-source-alist
     '((bash "https://github.com/tree-sitter/tree-sitter-bash")
       (cmake "https://github.com/uyha/tree-sitter-cmake")
       (css "https://github.com/tree-sitter/tree-sitter-css")
       (elisp "https://github.com/Wilfred/tree-sitter-elisp")
       (go "https://github.com/tree-sitter/tree-sitter-go")
       (html "https://github.com/tree-sitter/tree-sitter-html")
       (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
       (json "https://github.com/tree-sitter/tree-sitter-json")
       (make "https://github.com/alemuller/tree-sitter-make")
       (markdown "https://github.com/ikatyang/tree-sitter-markdown")
       (python "https://github.com/tree-sitter/tree-sitter-python")
       (toml "https://github.com/tree-sitter/tree-sitter-toml")
       (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
       (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
       (yaml "https://github.com/ikatyang/tree-sitter-yaml")
       (clojure "https://github.com/sogaiu/tree-sitter-clojure")
       (rust "https://github.com/tree-sitter/tree-sitter-rust")))
#+end_src

Lower font lock level

#+begin_src emacs-lisp
  (setq treesit-font-lock-level 2)
#+end_src

* Hideshow

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+end_src

* Eldoc

** COMMENT Display in childframe

#+begin_src emacs-lisp
  (straight-use-package 'eldoc-box)
#+end_src

** COMMENT Replace the default C-h .

#+begin_src emacs-lisp
  (keymap-set global-map "C-h ."  'eldoc-box-help-at-point)
#+end_src

* Display Current Function

** Which Function Mode

Display current function name in mode-line.

#+begin_src emacs-lisp
  (require 'which-func)

  (setq which-func-update-delay 0.25)

  (which-function-mode 1)
#+end_src

** COMMENT Topsy

Show current function signature in header line.

#+begin_src emacs-lisp
  (straight-use-package
   '(topsy :host github :repo "alphapapa/topsy.el"))

  (autoload 'topsy-mode "topsy" nil t)
#+end_src

* Code Formatter

#+begin_src emacs-lisp
  (straight-use-package 'format-all)

  (keymap-set prog-mode-map "C-c f" 'format-all-buffer)
#+end_src

* Force save file
#+begin_src emacs-lisp
  (defun meomacs-save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

  (global-set-key (kbd "C-c w") 'meomacs-save-buffer-always)
#+end_src

* COMMENT Flycheck

#+begin_src emacs-lisp
  (straight-use-package 'flycheck)

  (setq flycheck-check-syntax-automatically '(save idle-buffer-switch mode-enabled))
#+end_src

* Lisp Parenthese

** COMMENT Combobulate

#+begin_src emacs-lisp
  (straight-use-package 'combobulate)

  (add-hook 'prog-mode-hook 'combobulate-mode)
#+end_src

** COMMENT Puni

#+begin_src emacs-lisp
  (straight-use-package 'puni)

  (add-hook 'prog-mode-hook 'puni-mode)
#+end_src

** Paredit
#+begin_src emacs-lisp
  (straight-use-package 'paredit)

  (require 'paredit)

  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'clojure-ts-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
#+end_src

* LSP

** COMMENT lspce

Use lspce as LSP client.

#+begin_src emacs-lisp
  (straight-use-package '(lspce :host github
                                :repo "zbelial/lspce"
                                :files (:defaults "lspce-module.so")
                                :pre-build (("cargo" "build" "--release")
                                            ("cp" "./target/release/liblspce_module.so" "./lspce-module.so"))))

  (autoload 'lspce-mode "lspce" nil t)

  (with-eval-after-load "lspce"
    (define-key lspce-mode-map (kbd "C-c l r") 'lspce-rename)
    (define-key lspce-mode-map (kbd "C-c l a") 'lspce-code-actions)
    (define-key lspce-mode-map (kbd "C-c l h") 'lspce-help-at-point))
#+end_src

*** Key binding

#+begin_src emacs-lisp
  (keymap-set prog-mode-map "C-c L" 'lspce-mode)
#+end_src

** COMMENT Lsp-mode

Use lsp-mode as LSP client.

#+begin_src emacs-lisp
  (setenv "LSP_USE_PLISTS" "true")

  (straight-use-package 'lsp-mode)

  (setq lsp-keymap-prefix "C-c l"
        lsp-enable-symbol-highlighting nil
        lsp-enable-dap-auto-configure nil
        lsp-lens-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-signature-doc-lines 3
        lsp-auto-execute-action nil
        lsp-enable-on-type-formatting nil)

  (setq lsp-disabled-clients '(tfls clangd rls rnix-lsp semgrep-ls deno-ls))

  (setq-default lsp-rust-analyzer-cargo-watch-command "check"
                lsp-eldoc-render-all t)

  (autoload 'lsp "lsp-mode" nil t)

  (with-eval-after-load "lsp-mode"
    (keymap-set lsp-mode-map "M-RET" 'lsp-execute-code-action))
#+end_src

*** Key binding

#+begin_src emacs-lisp
  (keymap-set prog-mode-map "C-c L" 'lsp)
#+end_src

*** Lsp Booster
#+begin_src emacs-lisp
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
  (advice-add (if (progn (require 'json)
                         (fboundp 'json-parse-buffer))
                  'json-parse-buffer
                'json-read)
              :around
              #'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))

  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src

*** COMMENT Lsp-ui

#+begin_src emacs-lisp
  (straight-use-package 'lsp-ui)

  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
#+end_src

** Eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
  (autoload 'eglot "eglot" nil t)

  (setq eglot-ignored-server-capabilities
        '(:documentHighlightProvider
          :inlayHintProvider
          :workspaceSymbolProvider
          :documentSymbolProvider
          :codeLensProvider))

  (setq eglot-autoshutdown t)

  (setq eglot-stay-out-of '(yasnippet))

  (setq eglot-send-changes-idle-time 0)

  (defun eglot-setup-eldoc ()
    (setq-local eldoc-documentation-functions '(flymake-eldoc-function
                                                eglot-signature-eldoc-function
                                                eglot-hover-eldoc-function)))

  (add-hook 'eglot-mode-hook 'eglot-setup-eldoc)

  (with-eval-after-load "eglot"
    (define-key eglot-mode-map (kbd "<C-return>") 'eglot-code-actions))
#+end_src

*** Turn off event logs

#+begin_src emacs-lisp
  (with-eval-after-load "eglot"
    (setq eglot-events-buffer-config '(:size 0 :format full))
    (setq eglot-events-buffer-size 0))

  (with-eval-after-load "jsonrpc"
    (fset #'jsonrpc--log-event #'ignore)
    (setq jsonrpc-event-hook nil))
#+end_src

*** Use lsp-booster

#+begin_src emacs-lisp
  (straight-use-package
   '(eglot-booster :host github
                   :repo "jdtsmith/eglot-booster"))

  (setq eglot-booster-io-only t)

  (add-hook 'eglot-mode-hook 'eglot-booster-mode)
#+end_src

*** Key Binding

#+tblname: eglot-keymap-table
| Key | Command                            |
|-----+------------------------------------|
| s   | eglot                              |
| a   | eglot-code-actions                 |
| o   | eglot-code-action-organize-imports |
| r   | eglot-rename                       |
| k   | eglot-shutdown                     |
| i   | eglot-find-implementation          |

#+header: :var keymap-table=eglot-keymap-table
#+begin_src emacs-lisp
  (meomacs-keymap-table eglot-keymap keymap-table)
  (global-set-key (kbd "C-c e") 'eglot-keymap)
#+end_src

*** Configuration

#+begin_src emacs-lisp
  (setq-default eglot-workspace-configuration
                '(:rust-analyzer (:hover (:memoryLayout (:enable :json-false))
                                  :typing (:excludeChars "([{"))))
#+end_src

*** Flymake

#+begin_src emacs-lisp
  (setq flymake-no-changes-timeout 0.5)

  (with-eval-after-load "flymake"
    (keymap-set flymake-mode-map "C-c ! k" 'flymake-show-buffer-diagnostics)
    (keymap-set flymake-mode-map "C-c ! a" 'flymake-show-project-diagnostics)
    (keymap-set flymake-mode-map "C-c ! n" 'flymake-goto-next-error)
    (keymap-set flymake-mode-map "C-c ! p" 'flymake-goto-prev-error))
#+end_src

** COMMENT Lsp-copilot

#+begin_src emacs-lisp
  (straight-use-package '(lsp-copilot :repo "jadestrong/lsp-copilot"
                                      :host github
                                      :files ("*.el" "*.toml")))

  (straight-use-package 'ht)

  (straight-use-package 'projectile)

  (require 'projectile)

  (setq lsp-copilot--exec-file
        (expand-file-name "~/workspace/lsp-copilot-flake/result/bin/lsp-copilot"))
#+end_src

* Clojure

** Clojure-mode

Use clojure-ts-mode instead of clojure-mode.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-mode)

  (setq clojure-toplevel-inside-comment-form t)
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
  (straight-use-package 'cider)

  (autoload 'cider-jack-in "cider" nil t)

  (setq cider-offer-to-open-cljs-app-in-browser nil
        cider-font-lock-dynamically '(macro deprecated)
        cider-preferred-build-tool 'shadow-cljs
        cider-repl-type 'shadow
        cider-use-xref t
        cider-xref-fn-depth 90)
#+end_src

** COMMENT Clojure-ts-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-ts-mode)

  (setq clojure-ts-indent-style 'fixed)

  (add-to-list 'auto-mode-alist '("\\.clj\\'" . clojure-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.cljs\\'" . clojure-ts-clojurescript-mode))
  (add-to-list 'auto-mode-alist '("\\.cljc\\'" . clojure-ts-clojurec-mode))

  (add-to-list 'major-mode-remap-alist '(clojure-script-mode . clojure-ts-clojurescript-mode))
  (add-to-list 'major-mode-remap-alist '(clojure-mode . clojure-ts-mode))
  (add-to-list 'major-mode-remap-alist '(clojurec-mode . clojure-ts-clojurec-mode))

  (with-eval-after-load "clojure-ts-mode"
    (setq clojure-ts-toplevel-inside-comment-form t))
#+end_src

** COMMENT Inf-Clojure

A lightweight integration to socket repl.

#+begin_src emacs-lisp
  (straight-use-package 'inf-clojure)

  (autoload 'inf-clojure "inf-clojure" t t)
  (autoload 'inf-clojure-connect "inf-clojure" t t)

  (with-eval-after-load "clojure-ts-mode"
    (add-hook 'clojure-ts-mode-hook #'inf-clojure-minor-mode)
    (keymap-set clojure-ts-mode-map "C-c M-c" 'inf-clojure-connect))
#+end_src

** Jarchive
For opening .jar files. This is required for Eglot.

#+begin_src emacs-lisp
  (straight-use-package 'jarchive)

  (with-eval-after-load "clojure-ts-mode"
    (jarchive-mode)
    (diminish 'jarchive-mode))

  (with-eval-after-load "clojure-mode"
    (jarchive-mode)
    (diminish 'jarchive-mode))
#+end_src

** COMMENT Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
  (straight-use-package 'flycheck-clj-kondo)

  (with-eval-after-load "clojure-ts-mode"
    (require 'flycheck-clj-kondo))

  (add-hook 'clojure-mode-hook 'flycheck-mode)
#+end_src

** COMMENT Format code with zprint

#+begin_src emacs-lisp
  (straight-use-package '(zprint :type git
                                 :host github
                                 :repo "DogLooksGood/zprint.el"))

  (autoload 'zprint "zprint" nil t)

  (with-eval-after-load "clojure-ts-mode"
    (define-key clojure-ts-mode-map (kbd "C-c C-f") 'zprint))
#+end_src

* Svelte
** svelte-mode
#+begin_src emacs-lisp
  (straight-use-package 'svelte-mode)
#+end_src

* Typescript

** typescript-mode
#+begin_src emacs-lisp
  (setq-default typescript-indent-level 4
                typescript-ts-mode-indent-offset 4)

  (add-to-list 'auto-mode-alist (cons "\\.ts\\'" 'typescript-ts-mode))
  (add-to-list 'auto-mode-alist (cons "\\.tsx\\'" 'tsx-ts-mode))

  (setq lsp-typescript-preferences-quote-style "single"
        lsp-typescript-surveys-enabled nil
        lsp-typescript-format-enable nil)

  (add-hook 'tsx-ts-mode-hook
            (lambda ()
              (setq-local lsp-enable-indentation nil)))
#+end_src

** Deno support

#+begin_src emacs-lisp
  (straight-use-package 'deno-ts-mode)
#+end_src

** prisma
#+begin_src emacs-lisp
  (straight-use-package '(prisma-mode :host github
                                      :repo "davidarenas/prisma-mode"))

  (autoload 'prisma-mode "prisma-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.prisma\\'" . prisma-mode))

  (with-eval-after-load "prisma-mode"
    (define-key prisma-mode-map (kbd "C-c C-f") 'prisma-fmt-buffer))
#+end_src

* Lua
#+begin_src emacs-lisp
  (straight-use-package 'lua-mode)
#+end_src

* Rust
** cargo.el
#+begin_src emacs-lisp
  (straight-use-package '(cargo :host github
                                :repo "DogLooksGood/cargo.el"))

  (autoload 'cargo-minor-mode "cargo" nil t)
  (add-hook 'rust-ts-mode-hook 'cargo-minor-mode)

  (setq cargo-process--custom-path-to-bin nil
        cargo-process--rustc-cmd nil)

  (with-eval-after-load "cargo"
    (define-key cargo-process-mode-map (kbd "/") 'scroll-down)
    (define-key cargo-process-mode-map (kbd "@") 'scroll-up)
    (define-key cargo-process-mode-map (kbd "\\") 'toggle-truncate-lines))
#+end_src

** rust-ts-mode
#+begin_src emacs-lisp
  (straight-use-package 'rust-mode)
  (straight-use-package 'rust-ts-mode)

  (add-hook 'rust-ts-mode-hook
            (lambda ()
              (require 'rust-mode)
              (require 'rust-compile)))

  (add-to-list 'auto-mode-alist (cons "\\.rs\\'" 'rust-ts-mode))

  (setq lsp-rust-analyzer-completion-add-call-parenthesis nil
        lsp-rust-analyzer-proc-macro-enable t
        lsp-rust-analyzer-server-format-inlay-hints nil)
#+end_src

Write a command to switch between wasm32 and native target triple.

#+begin_src emacs-lisp
  (defun rust-toggle-lsp-target ()
    (interactive)
    (require 'lsp-rust)
    (when
        (y-or-n-p (format "Current target is [%s], switch?"
                             (or lsp-rust-analyzer-cargo-target "default")))
      (if lsp-rust-analyzer-cargo-target
          (setq lsp-rust-analyzer-cargo-target nil
                cargo-process--command-check "check")
        (setq lsp-rust-analyzer-cargo-target "wasm32-unknown-unknown"
              cargo-process--command-check "check --target wasm32-unknown-unknown"))))
#+end_src

* Nix

#+begin_src emacs-lisp
  (straight-use-package 'nix-mode)

  (autoload 'nix-mode "nix-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+end_src

** nixpkgs-fmt
#+begin_src emacs-lisp
  (straight-use-package 'nixpkgs-fmt)

  (with-eval-after-load "nixpkgs-fmt"
    (define-key nix-mode-map (kbd "C-c C-f") 'nixpkgs-fmt)
    (add-hook 'nix-mode-hook 'nixpkgs-fmt-on-save-mode))
#+end_src

* Solidity
#+begin_src emacs-lisp
  (straight-use-package 'solidity-mode)

  (straight-use-package 'company-solidity)
  (straight-use-package 'solidity-flycheck)

  (with-eval-after-load "solidity-mode"
    (require 'company-solidity)
    (require 'solidity-flycheck))
#+end_src

* Restclient
#+begin_src emacs-lisp
  (straight-use-package 'restclient)
  (add-to-list 'auto-mode-alist '("\\.restclient" . restclient-mode))
#+end_src

* HTML
#+begin_src emacs-lisp
  (straight-use-package 'web-mode)
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 4)

  (add-to-list 'auto-mode-alist
               '("\\.html\\'" . web-mode))
#+end_src

#+begin_src emacs-lisp
  (setq-default css-indent-offset 4
                js-indent-level 4)
#+end_src

** Emmet
#+begin_src emacs-lisp
  (straight-use-package 'emmet-mode)

  (autoload 'emmet-expand-line "emmet-mode" nil t)

  (with-eval-after-load "mhtml-mode"
    (define-key mhtml-mode-map (kbd "M-RET") 'emmet-expand-line))

  (with-eval-after-load "svelte-mode"
    (define-key svelte-mode-map (kbd "M-RET") 'emmet-expand-line))
#+end_src

* Move
#+begin_src emacs-lisp
  (straight-use-package 'move-mode)
#+end_src

* KDL
** kdl-mode
#+begin_src emacs-lisp
  (straight-use-package '(kdl-mode :host github
                                   :repo "bobuk/kdl-mode"))

  (add-to-list 'auto-mode-alist '("\\.kdl\\'" . kdl-mode))
  (add-hook 'kdl-mode-hook (lambda () (setq-local tab-width 2)))
  (autoload 'kdl-mode "kdl-mode")
#+end_src

* Just

** Just-mode
#+begin_src emacs-lisp
  (straight-use-package 'just-mode)

  (autoload 'just-mode "just-mode" nil t)

  (add-to-list 'auto-mode-alist '("/[Jj]ustfile\\'" . just-mode))
  (add-to-list 'auto-mode-alist '("\\.[Jj]ust\\(file\\)?\\'" . just-mode))

  (defun +just-mode-hook ()
    (modify-syntax-entry ?- "_"))

  (add-hook 'just-mode-hook '+just-mode-hook)
#+end_src

** Justl

Execute recipes in Justfile.

#+begin_src emacs-lisp
  (straight-use-package 'justl)

  (autoload 'justl-exec-recipe-in-dir "justl" t t)

  (keymap-set global-map "C-c j" 'justl-exec-recipe-in-dir)
#+end_src

** Rerun

Execute the last recipe by finding the =*just*= buffer and call ~justl-recompile~.

#+begin_src emacs-lisp
  (defun justl-execute-last-recipe ()
    (interactive)
    (when-let* ((curr-win (selected-window))
                (just-buf (get-buffer "*just*")))
      (with-current-buffer just-buf
        (direnv-update-directory-environment)
        (call-interactively 'justl-recompile))
      (select-window curr-win)))

  (keymap-set global-map "C-c J" 'justl-execute-last-recipe)
#+end_src

* YAML
#+begin_src emacs-lisp
  (straight-use-package 'yaml-mode)

  (autoload 'yaml-mode "yaml-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode))
  (add-to-list 'magic-mode-alist '("^%YAML\\s-+[0-9]+\\.[0-9]+\\(\\s-+#\\|\\s-*$\\)" . yaml-mode))
#+end_src

* Docker
#+begin_src emacs-lisp
  (straight-use-package 'docker)
  (straight-use-package 'dockerfile-ts-mode)

  (add-to-list 'auto-mode-alist '("/Dockerfile\\'" . dockerfile-ts-mode))

  (autoload 'docker "docker" nil t)
#+end_src

* Xref configuration

#+begin_src emacs-lisp
  (setq xref-show-definitions-function 'xref-show-definitions-completing-read)
#+end_src

* Compilation mode support

#+begin_src emacs-lisp
  (setq compile-command "")

  (require 'ansi-color)

  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
#+end_src

* Dumb Jump

#+begin_src emacs-lisp
  (straight-use-package 'dumb-jump)
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+end_src

* C

#+begin_src emacs-lisp
  (setq-default c-basic-offset 4)
#+end_src
