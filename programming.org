#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Custom format buffer function
#+begin_src emacs-lisp
  (defun meomacs-default-format-buffer ()
    (interactive)
    (save-mark-and-excursion
      (indent-region-line-by-line (point-min) (point-max))))

  (defun meomacs-format-buffer ()
    "Format whole buffer with LSP and fallback behavior."
    (interactive)
    (if (and
         (bound-and-true-p lsp-mode)
         lsp-enable-indentation)
        (call-interactively #'lsp-format-buffer)
      (call-interactively 'meomacs-default-format-buffer)))

  (global-set-key (kbd "C-c C-f") 'meomacs-format-buffer)
#+end_src

* Stick scroll
#+begin_src emacs-lisp
  (straight-use-package
   '(topsy :host github :repo "alphapapa/topsy.el"))

  (define-key toggle-map "s" 'topsy-mode)
#+end_src

* Force save file
#+begin_src emacs-lisp
  (defun save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

  (global-set-key (kbd "<f5>") 'save-buffer-always)
  (global-set-key (kbd "C-c y") 'save-buffer-always)
#+end_src

* Flycheck

#+begin_src emacs-lisp
  (straight-use-package 'flycheck)

  (setq flycheck-display-errors-function nil)
#+end_src

* Outline
#+begin_src emacs-lisp
  (straight-use-package 'imenu-list)

  (require 'imenu-list)

  (define-key toggle-map "i" 'imenu-list)
#+end_src

* COMMENT Tree-sitter

#+begin_src emacs-lisp
  (straight-use-package 'tree-sitter)
  (straight-use-package 'tree-sitter-langs)

  (require 'tree-sitter)
  (require 'tree-sitter-langs)
#+end_src


* Lisp Parenthese
#+begin_src emacs-lisp
  (straight-use-package 'paredit)

  (require 'paredit)

  (define-key emacs-lisp-mode-map (kbd "C-c )") 'paredit-forward-slurp-sexp)
  (define-key emacs-lisp-mode-map (kbd "C-c (") 'paredit-forward-barf-sexp)
#+end_src

* LSP

** COMMENT lspce

Use lspce as LSP client.

#+begin_src emacs-lisp
  (straight-use-package '(lspce :host github
                                :repo "zbelial/lspce"
                                :files (:defaults "lspce-module.so")
                                :pre-build (("cargo" "build" "--release")
                                            ("cp" "./target/release/liblspce_module.so" "./lspce-module.so"))))

  (autoload 'lspce-mode "lspce" nil t)

  (with-eval-after-load "lspce"
    (define-key lspce-mode-map (kbd "C-c l r") 'lspce-rename)
    (define-key lspce-mode-map (kbd "C-c l a") 'lspce-code-actions)
    (define-key lspce-mode-map (kbd "C-c l h") 'lspce-help-at-point))
#+end_src

*** Key binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'lspce-mode)
#+end_src

** lsp-mode

Use lsp-mode as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'lsp-mode)

  (setq lsp-keymap-prefix "C-c l"
        lsp-enable-symbol-highlighting nil
        lsp-enable-dap-auto-configure nil
        lsp-lens-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-signature-doc-lines 3
        lsp-auto-execute-action nil)


  (autoload 'lsp "lsp-mode" nil t)

  (with-eval-after-load "lsp-mode"
    (add-hook 'rust-mode-hook 'lsp)
    (add-hook 'typescript-ts-mode-hook 'lsp)
    (define-key lsp-mode-map (kbd "<C-return>") 'lsp-execute-code-action))
#+end_src

*** Key binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'lsp)
#+end_src

** COMMENT Eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'eglot)

  (autoload 'eglot "eglot" nil t)

  (setq eglot-confirm-server-initiated-edits nil)

  (with-eval-after-load "eglot"
    (define-key eglot-mode-map (kbd "<C-return>") 'eglot-code-actions))
#+end_src

*** Key Binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'eglot)
#+end_src

* Clojure

** COMMENT clojure-ts-mode

Use clojure-ts-mode instead of clojure-mode.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-ts-mode)

  (setq clojure-ts-toplevel-inside-comment-form t)

  (with-eval-after-load "clojure-ts-mode"
    (define-key clojure-ts-mode-map (kbd "C-c M-j") 'cider-jack-in)
    (define-key clojure-ts-mode-map (kbd "C-c M-J") 'cider-jack-in-cljs))
#+end_src


** clojure-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-mode)

  (setq clojure-toplevel-inside-comment-form t
        clojure-defun-style-default-indent t)

  (with-eval-after-load "clojure-mode"

    (define-key clojure-mode-map (kbd "C-c )") 'paredit-forward-slurp-sexp)
    (define-key clojure-mode-map (kbd "C-c (") 'paredit-forward-barf-sexp)

    (define-clojure-indent
     (re-frame/reg-event-fx :defn)
     (re-frame/reg-event-db :defn)
     (re-frame/reg-sub :defn)
     (re-frame/reg-fx :defn)
     (t/async :defn)
     (thrown-with-msg? :defn)
     (d/input :defn)
     (d/textarea :defn)
     (d/option :defn)
     (d/select :defn)
     (d/a :defn)
     (d/abbr :defn)
     (d/address :defn)
     (d/area :defn)
     (d/article :defn)
     (d/aside :defn)
     (d/audio :defn)
     (d/b :defn)
     (d/base :defn)
     (d/bdi :defn)
     (d/bdo :defn)
     (d/big :defn)
     (d/blockquote :defn)
     (d/body :defn)
     (d/br :defn)
     (d/button :defn)
     (d/canvas :defn)
     (d/caption :defn)
     (d/cite :defn)
     (d/code :defn)
     (d/col :defn)
     (d/colgroup :defn)
     (d/data :defn)
     (d/datalist :defn)
     (d/dd :defn)
     (d/del :defn)
     (d/details :defn)
     (d/dfn :defn)
     (d/dialog :defn)
     (d/div :defn)
     (d/dl :defn)
     (d/dt :defn)
     (d/em :defn)
     (d/embed :defn)
     (d/fieldset :defn)
     (d/figcaption :defn)
     (d/figure :defn)
     (d/footer :defn)
     (d/form :defn)
     (d/h1 :defn)
     (d/h2 :defn)
     (d/h3 :defn)
     (d/h4 :defn)
     (d/h5 :defn)
     (d/h6 :defn)
     (d/head :defn)
     (d/header :defn)
     (d/hgroup :defn)
     (d/hr :defn)
     (d/html :defn)
     (d/i :defn)
     (d/iframe :defn)
     (d/img :defn)
     (d/ins :defn)
     (d/kbd :defn)
     (d/keygen :defn)
     (d/label :defn)
     (d/legend :defn)
     (d/li :defn)
     (d/link :defn)
     (d/main :defn)
     (d/map :defn)
     (d/mark :defn)
     (d/menu :defn)
     (d/menuitem :defn)
     (d/meta :defn)
     (d/meter :defn)
     (d/nav :defn)
     (d/noscript :defn)
     (d/object :defn)
     (d/ol :defn)
     (d/optgroup :defn)
     (d/output :defn)
     (d/p :defn)
     (d/param :defn)
     (d/picture :defn)
     (d/pre :defn)
     (d/progress :defn)
     (d/q :defn)
     (d/rp :defn)
     (d/rt :defn)
     (d/ruby :defn)
     (d/s :defn)
     (d/samp :defn)
     (d/script :defn)
     (d/section :defn)
     (d/small :defn)
     (d/source :defn)
     (d/span :defn)
     (d/strong :defn)
     (d/style :defn)
     (d/sub :defn)
     (d/summary :defn)
     (d/sup :defn)
     (d/table :defn)
     (d/tbody :defn)
     (d/td :defn)
     (d/tfoot :defn)
     (d/th :defn)
     (d/thead :defn)
     (d/time :defn)
     (d/title :defn)
     (d/tr :defn)
     (d/track :defn)
     (d/u :defn)
     (d/ul :defn)
     (d/var :defn)
     (d/video :defn)
     (d/wbr :defn)
     (d/circle :defn)
     (d/clip :defn)
     (d/Path :defn)
     (d/ellipse :defn)
     (d/g :defn)
     (d/line :defn)
     (d/mask :defn)
     (d/path :defn)
     (d/pattern :defn)
     (d/polyline :defn)
     (d/rect :defn)
     (d/svg :defn)
     (d/text :defn)
     (d/defs :defn)
     (d/linear :defn)
     (d/Gradient :defn)
     (d/polygon :defn)
     (d/radial :defn)
     (d/stop :defn)
     (d/tspan :defn)
     (js-await 1)))
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
  (straight-use-package 'cider)

  (autoload 'cider-jack-in "cider" nil t)

  (setq cider-offer-to-open-cljs-app-in-browser nil
        cider-preferred-build-tool 'shadow-cljs
        cider-repl-type 'shadow)
#+end_src

** COMMENT Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
  (straight-use-package 'flycheck-clj-kondo)

  (with-eval-after-load "clojure-mode"
    (require 'flycheck-clj-kondo))

  (add-hook 'clojure-mode-hook 'flycheck-mode)
#+end_src

** COMMENT Format code with zprint

#+begin_src emacs-lisp
  (straight-use-package '(zprint :type git
                                 :host github
                                 :repo "DogLooksGood/zprint.el"))

  (autoload 'zprint "zprint" nil t)

  (with-eval-after-load "clojure-mode"
    (define-key clojure-mode-map (kbd "C-c C-f") 'zprint))
#+end_src

* Svelte
** svelte-mode
#+begin_src emacs-lisp
  (straight-use-package 'svelte-mode)
#+end_src

* Typescript

** typescript-mode
#+begin_src emacs-lisp
  (setq typescript-indent-level 2
        typescript-ts-mode-indent-offset 2)

  (add-to-list 'auto-mode-alist (cons "\\.ts\\'" 'typescript-ts-mode))
  (add-to-list 'auto-mode-alist (cons "\\.tsx\\'" 'tsx-ts-mode))

  (setq lsp-typescript-preferences-quote-style "single"
        lsp-typescript-surveys-enabled nil
        lsp-typescript-format-enable nil)

  (make-variable-buffer-local 'lsp-enable-indentation)
  (setq-default lsp-enable-indentation t)

  (add-hook 'tsx-ts-mode-hook
            (lambda ()
              (setq-local lsp-enable-indentation nil)))
#+end_src

** prisma
#+begin_src emacs-lisp
  (straight-use-package '(prisma-mode :host github
                                      :repo "davidarenas/prisma-mode"))

  (autoload 'prisma-mode "prisma-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.prisma\\'" . prisma-mode))

  (with-eval-after-load "prisma-mode"
    (define-key prisma-mode-map (kbd "C-c C-f") 'prisma-fmt-buffer))
#+end_src

* Lua
#+begin_src emacs-lisp
  (straight-use-package 'lua-mode)
#+end_src

* Rust
** cargo.el
#+begin_src emacs-lisp
  (straight-use-package '(cargo :host github
                                :repo "DogLooksGood/cargo.el"))

  (autoload 'cargo-minor-mode "cargo" nil t)
  (add-hook 'rust-ts-mode-hook 'cargo-minor-mode)

  (setq cargo-process--custom-path-to-bin nil
        cargo-process--rustc-cmd nil)

  (with-eval-after-load "cargo"
    (define-key cargo-process-mode-map (kbd "/") 'scroll-down)
    (define-key cargo-process-mode-map (kbd "?") 'scroll-down-line)
    (define-key cargo-process-mode-map (kbd "@") 'scroll-up)
    (define-key cargo-process-mode-map (kbd "^") 'scroll-up-line)
    (define-key cargo-process-mode-map (kbd "\\") 'toggle-truncate-lines))
#+end_src

** rust-mode
#+begin_src emacs-lisp
  (straight-use-package 'rust-mode)

  (setq lsp-rust-analyzer-completion-add-call-parenthesis nil
        lsp-rust-analyzer-proc-macro-enable t)

#+end_src

Write a command to switch between wasm32 and native target triple.

#+begin_src emacs-lisp
  (defun rust-toggle-lsp-target ()
    (interactive)
    (require 'lsp-rust)
    (when
        (y-or-n-p (format "Current target is [%s], switch?"
                             (or lsp-rust-analyzer-cargo-target "default")))
      (if lsp-rust-analyzer-cargo-target
          (setq lsp-rust-analyzer-cargo-target nil
                cargo-process--command-check "check")
        (setq lsp-rust-analyzer-cargo-target "wasm32-unknown-unknown"
              cargo-process--command-check "check --target wasm32-unknown-unknown"))))

  (with-eval-after-load "rust-mode"
    (define-key rust-mode-map (kbd "C-c '") #'rust-toggle-lsp-target))
#+end_src

** COMMENT rustic-mode
#+begin_src emacs-lisp
  (straight-use-package 'rustic)
#+end_src

* Nix

#+begin_src emacs-lisp
  (straight-use-package 'nix-mode)
  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+end_src

** nixpkgs-fmt
#+begin_src emacs-lisp
  (straight-use-package 'nixpkgs-fmt)

  (with-eval-after-load "nixpkgs-fmt"
    (define-key nix-mode-map (kbd "C-c C-f") 'nixpkgs-fmt)
    (add-hook 'nix-mode-hook 'nixpkgs-fmt-on-save-mode))
#+end_src

* Solidity
#+begin_src emacs-lisp
  (straight-use-package 'solidity-mode)

  (straight-use-package 'company-solidity)
  (straight-use-package 'solidity-flycheck)

  (with-eval-after-load "solidity-mode"
    (require 'company-solidity)
    (require 'solidity-flycheck))
#+end_src

* Restclient
#+begin_src emacs-lisp
  (straight-use-package 'restclient)
  (add-to-list 'auto-mode-alist '("\\.restclient" . restclient-mode))
#+end_src

* HTML
#+begin_src emacs-lisp
  (straight-use-package 'web-mode)
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2)

  (add-to-list 'auto-mode-alist
               '("\\.html\\'" . web-mode))
#+end_src

#+begin_src emacs-lisp
  (setq-default css-indent-offset 2
                js-indent-level 2)
#+end_src

** Emmet
#+begin_src emacs-lisp
  (straight-use-package 'emmet-mode)

  (autoload 'emmet-expand-line "emmet-mode" nil t)

  (with-eval-after-load "mhtml-mode"
    (define-key mhtml-mode-map (kbd "M-RET") 'emmet-expand-line))

  (with-eval-after-load "svelte-mode"
    (define-key svelte-mode-map (kbd "M-RET") 'emmet-expand-line))
#+end_src

* Move
#+begin_src emacs-lisp
  (straight-use-package 'move-mode)
#+end_src

* Just

** Just-mode
#+begin_src emacs-lisp
  (straight-use-package 'just-mode)

  (defun +just-mode-hook ()
    (modify-syntax-entry ?- "_"))

  (add-hook 'just-mode-hook '+just-mode-hook)
#+end_src

* Treesit grammars
#+begin_src emacs-lisp
  (straight-use-package 'treesit-auto)
  (require 'treesit-auto)
  (setq treesit-auto-install nil
        treesit-auto-langs '(rust html clojure typescript tsx))
  (global-treesit-auto-mode)
#+end_src

* YAML
#+begin_src emacs-lisp
  (straight-use-package 'yaml-mode)
#+end_src

* Docker
#+begin_src emacs-lisp
  (straight-use-package 'docker)
  (straight-use-package 'dockerfile-mode)

  (autoload 'docker "docker" nil t)
#+end_src
