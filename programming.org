#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Force save file
#+begin_src emacs-lisp
  (defun save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

  (global-set-key (kbd "<f5>") 'save-buffer-always)
#+end_src

* Flycheck

#+begin_src emacs-lisp
  (straight-use-package 'flycheck)
  (straight-use-package 'flycheck-pos-tip)

  (with-eval-after-load 'flycheck
    (flycheck-pos-tip-mode))

  (setq flycheck-pos-tip-timeout 60)
#+end_src

* LSP

** lsp-mode

Use lsp-mode as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'lsp-mode)

  (setq lsp-keymap-prefix "C-c l"
        lsp-enable-symbol-highlighting nil
        lsp-enable-dap-auto-configure nil
        lsp-lens-enable nil
        lsp-headerline-breadcrumb-enable nil)

  (autoload 'lsp "lsp-mode" nil t)
#+end_src

*** Key binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'lsp)
#+end_src

** COMMENT eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'eglot)

  (autoload 'eglot "eglot" nil t)
#+end_src

*** Key Binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'eglot)
#+end_src

* Clojure

** clojure-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-mode)

  (setq clojure-toplevel-inside-comment-form t)

  (with-eval-after-load "clojure-mode"
    (define-clojure-indent
      (re-frame/reg-event-fx :defn)
      (re-frame/reg-event-db :defn)
      (re-frame/reg-sub :defn)
      (re-frame/reg-fx :defn)
      (t/async :defn)
      (defclass '(1 :defn))))
#+end_src

** Fix clojure syntax highlighting

#+begin_src emacs-lisp
  (with-eval-after-load "clojure-mode"
    (setq clojure-font-lock-keywords
          (eval-when-compile
            `(;; Function definition (anything that starts with def and is not
              ;; listed above)
              (,(concat "(\\(?:" clojure--sym-regexp "/\\)?"
                        "\\(def[^ \r\n\t]*\\)"
                        ;; Function declarations
                        "\\>"
                        ;; Any whitespace
                        "[ \r\n\t]*"
                        ;; Possibly type or metadata
                        "\\(?:#?^\\(?:{[^}]*}\\|\\sw+\\)[ \r\n\t]*\\)*"
                        (concat "\\(" clojure--sym-regexp "\\)?"))
               (1 font-lock-keyword-face)
               (2 font-lock-function-name-face nil t))
              ;; (fn name? args ...)
              (,(concat "(\\(?:clojure.core/\\)?\\(fn\\)[ \t]+"
                        ;; Possibly type
                        "\\(?:#?^\\sw+[ \t]*\\)?"
                        ;; Possibly name
                        "\\(\\sw+\\)?" )
               (1 font-lock-keyword-face)
               (2 font-lock-function-name-face nil t))
              ;; Global constants - nil, true, false
              (,(concat
                 "\\<"
                 (regexp-opt
                  '("true" "false" "nil") t)
                 "\\>")
               0 font-lock-constant-face)
              ;; Special forms
              (,(concat
                 "("
                 (regexp-opt
                  '("def" "do" "if" "let" "let*" "var" "fn" "fn*" "loop" "loop*"
                    "recur" "throw" "try" "catch" "finally"
                    "set!" "new" "."
                    "monitor-enter" "monitor-exit" "quote") t)
                 "\\>")
               1 font-lock-keyword-face)
              ;; Built-in binding and flow of control forms
              (,(concat
                 "(\\(?:clojure.core/\\)?"
                 (regexp-opt
                  '("letfn" "case" "cond" "cond->" "cond->>" "condp"
                    "for" "when" "when-not" "when-let" "when-first" "when-some"
                    "if-let" "if-not" "if-some"
                    ".." "->" "->>" "as->" "doto" "and" "or"
                    "dosync" "doseq" "dotimes" "dorun" "doall"
                    "ns" "in-ns"
                    "with-open" "with-local-vars" "binding"
                    "with-redefs" "with-redefs-fn"
                    "declare") t)
                 "\\>")
               1 font-lock-keyword-face)
              ;; Character literals - \1, \a, \newline, \u0000
              ("\\\\\\([[:punct:]]\\|[a-z0-9]+\\>\\)" 0 'clojure-character-face)

              (,(format "\\(:\\{1,2\\}\\)\\([^%s]+\\)" clojure--sym-forbidden-rest-chars)
               (1 'clojure-keyword-face)
               (2 'clojure-keyword-face))

              ;; #_ and (comment ...) macros.
              (clojure--search-comment-macro 1 font-lock-comment-face t)
              ;; Highlight `code` marks, just like `elisp'.
              (,(rx "`" (group-n 1 (optional "#'")
                                 (+ (or (syntax symbol) (syntax word)))) "`")
               (1 'font-lock-constant-face prepend))
              ;; Highlight [[var]] comments
              (,(rx "[[" (group-n 1 (optional "#'")
                                  (+ (or (syntax symbol) (syntax word)))) "]]")
               (1 'font-lock-constant-face prepend))
              ;; Highlight escaped characters in strings.
              (clojure-font-lock-escaped-chars 0 'bold prepend)
              ;; Highlight grouping constructs in regular expressions
              (clojure-font-lock-regexp-groups
               (1 'font-lock-regexp-grouping-construct prepend))))))
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
  (straight-use-package 'cider)

  (autoload 'cider-jack-in "cider" nil t)

  (setq cider-offer-to-open-cljs-app-in-browser nil)

  (with-eval-after-load "cider"
    (define-key cider-mode-map (kbd "C-c C-f") nil))
#+end_src

** Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
  (straight-use-package 'flycheck-clj-kondo)

  (with-eval-after-load "clojure-mode"
    (require 'flycheck-clj-kondo))

  (add-hook 'clojure-mode-hook 'flycheck-mode)
#+end_src

** Format code with zprint

#+begin_src emacs-lisp
  (straight-use-package '(zprint :type git
                                 :host github
                                 :repo "DogLooksGood/zprint.el"))

  (autoload 'zprint "zprint" nil t)

  (with-eval-after-load "clojure-mode"
    (define-key clojure-mode-map (kbd "C-c C-f") 'zprint))
#+end_src

* Rust
** cargo.el
#+begin_src emacs-lisp
  (straight-use-package 'cargo)

  (autoload 'cargo-minor-mode "cargo" nil t)
#+end_src

** rust-mode
#+begin_src emacs-lisp
  (straight-use-package 'rust-mode)

  (with-eval-after-load "rust-mode"
    (add-hook 'rust-mode-hook 'cargo-minor-mode)
    (add-hook 'rust-mode-hook 'subword-mode))
#+end_src

** Use LSP

#+begin_src emacs-lisp
  (with-eval-after-load "lsp-mode"
    (add-hook 'rust-mode-hook 'lsp))
#+end_src

* HTML
#+begin_src emacs-lisp
  (straight-use-package '(htmlz
                          :type git
                          :host github
                          :repo "ezekiiel/htmlz-mode"))

  (straight-use-package 'websocket)
#+end_src

#+begin_src emacs-lisp
  (setq-default css-indent-offset 2
                js-indent-level 2)
#+end_src

** Emmet
#+begin_src emacs-lisp
  (straight-use-package 'emmet-mode)

  (autoload 'emmet-expand-line "emmet-mode" nil t)

  (with-eval-after-load "mhtml-mode"
    (define-key mhtml-mode-map (kbd "M-RET") 'emmet-expand-line))

#+end_src
