#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Stick scroll
#+begin_src emacs-lisp
  (straight-use-package
   '(topsy :host github :repo "alphapapa/topsy.el"))

  (define-key toggle-map (kbd "s") 'topsy-mode)
#+end_src

* Force save file
#+begin_src emacs-lisp
  (defun save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

  (global-set-key (kbd "<f5>") 'save-buffer-always)
#+end_src

* Flycheck

#+begin_src emacs-lisp
  (straight-use-package 'flycheck)
  (straight-use-package 'flycheck-pos-tip)

  (with-eval-after-load 'flycheck
    (flycheck-pos-tip-mode))

  (setq flycheck-pos-tip-timeout 60)
#+end_src

* Outline
#+begin_src emacs-lisp
  (straight-use-package 'imenu-list)

  (require 'imenu-list)

  (define-key toggle-map "i" 'imenu-list)
#+end_src

* LSP

** lsp-mode

Use lsp-mode as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'lsp-mode)

  (setq lsp-keymap-prefix "C-c l"
        lsp-enable-symbol-highlighting nil
        lsp-enable-dap-auto-configure nil
        lsp-lens-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-signature-doc-lines 3)

  (autoload 'lsp "lsp-mode" nil t)
#+end_src

*** Key binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'lsp)
#+end_src

** COMMENT Eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
  (straight-use-package 'eglot)

  (autoload 'eglot "eglot" nil t)

  (setq eglot-confirm-server-initiated-edits nil)

  (with-eval-after-load "eglot"
    (define-key eglot-mode-map (kbd "<C-return>") 'eglot-code-actions))

#+end_src

*** Key Binding

#+begin_src emacs-lisp
  (define-key toggle-map "L" 'eglot)
#+end_src

* Clojure

** clojure-mode

Use clojure-mode for basic syntax support.

#+begin_src emacs-lisp
  (straight-use-package 'clojure-mode)

  (setq clojure-toplevel-inside-comment-form t)

  (with-eval-after-load "clojure-mode"
    (define-clojure-indent
      (re-frame/reg-event-fx :defn)
      (re-frame/reg-event-db :defn)
      (re-frame/reg-sub :defn)
      (re-frame/reg-fx :defn)
      (t/async :defn)
      (defclass '(1 :defn))))
#+end_src

** Cider for REPL connection

#+begin_src emacs-lisp
  (straight-use-package 'cider)

  (autoload 'cider-jack-in "cider" nil t)

  (setq cider-offer-to-open-cljs-app-in-browser nil)

  (with-eval-after-load "cider"
    (define-key cider-mode-map (kbd "C-c C-f") nil))
#+end_src

** Linting with flycheck-clj-kondo

#+begin_src emacs-lisp
  (straight-use-package 'flycheck-clj-kondo)

  (with-eval-after-load "clojure-mode"
    (require 'flycheck-clj-kondo))

  (add-hook 'clojure-mode-hook 'flycheck-mode)
#+end_src

** Format code with zprint

#+begin_src emacs-lisp
  (straight-use-package '(zprint :type git
                                 :host github
                                 :repo "DogLooksGood/zprint.el"))

  (autoload 'zprint "zprint" nil t)

  (with-eval-after-load "clojure-mode"
    (define-key clojure-mode-map (kbd "C-c C-f") 'zprint))
#+end_src

* Svelte
** svelte-mode
#+begin_src emacs-lisp
  (straight-use-package 'svelte-mode)
#+end_src

* Typescript

** typescript-mode
#+begin_src emacs-lisp
  (straight-use-package 'typescript-mode)
#+end_src

* Lua
#+begin_src emacs-lisp
  (straight-use-package 'lua-mode)
#+end_src

* Rust
** cargo.el
#+begin_src emacs-lisp
  (straight-use-package 'cargo)

  (autoload 'cargo-minor-mode "cargo" nil t)
#+end_src

** rust-mode
#+begin_src emacs-lisp
  (straight-use-package 'rust-mode)

  (with-eval-after-load "rust-mode"
    (add-hook 'rust-mode-hook 'cargo-minor-mode)
    (add-hook 'rust-mode-hook 'subword-mode))
#+end_src

** Use LSP

#+begin_src emacs-lisp
  (with-eval-after-load "lsp-mode"
    (add-hook 'rust-mode-hook 'lsp))
#+end_src

* HTML
#+begin_src emacs-lisp
  (straight-use-package '(htmlz
                          :type git
                          :host github
                          :repo "ezekiiel/htmlz-mode"))

  (straight-use-package 'websocket)
#+end_src

#+begin_src emacs-lisp
  (setq-default css-indent-offset 2
                js-indent-level 2)
#+end_src

** Emmet
#+begin_src emacs-lisp
  (straight-use-package 'emmet-mode)

  (autoload 'emmet-expand-line "emmet-mode" nil t)

  (with-eval-after-load "mhtml-mode"
    (define-key mhtml-mode-map (kbd "M-RET") 'emmet-expand-line))

  (with-eval-after-load "svelte-mode"
    (define-key svelte-mode-map (kbd "M-RET") 'emmet-expand-line))
#+end_src
