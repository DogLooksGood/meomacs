#+title: Addons

Configuration for addons, additional features provided by individual packages.

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
#+end_src

* Git integration with magit & diff-hl & smerge

To manage the git repository, use builtin package ~vc~.

#+begin_src emacs-lisp
  (straight-use-package 'magit)
  (straight-use-package 'diff-hl)
  (straight-use-package 'smerge-mode)

  (autoload 'magit-status "magit" nil t)
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl-dired" nil t)
  (autoload 'smerge-mode "smerge-mode" nil t)
#+end_src

Key bindings

#+begin_src emacs-lisp
  (keymap-set global-map "C-x g" 'magit-status)
#+end_src

** COMMENT Diff-hl
Enable diff-hl in based on major modes.

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
#+end_src

* COMMENT Input method with emacs-rime

~librime~ is required for this feature.

~emacs-rime~ is the frontend of rime built with emacs input method API.

#+begin_src emacs-lisp
  (straight-use-package 'rime)

  (require 'rime)

  (setq default-input-method "rime"
        rime-emacs-module-header-root (file-name-directory (getenv "EMACS_MODULE_HEADER"))
        rime-show-candidate 'sidewindow
        rime-librime-root (meomacs-read-var "rime-librime-root")
        rime-share-data-dir (expand-file-name "~/.config/rime"))

  (with-eval-after-load "rime"
    (define-key rime-mode-map (kbd "C-`") 'rime-send-keybinding)

    (dolist (k '("TAB" "C-p" "C-n" "M-v" "C-v" "C-y" "<escape>"))
      (define-key rime-active-mode-map (kbd k) 'rime-send-keybinding))

    (define-key rime-active-mode-map (kbd "C-a") 'rime-inline-ascii))
#+end_src

Auto switch to inline ascii state when after a space after a non-ascii character.

#+begin_src emacs-lisp
  (setq rime-inline-predicates '(rime-predicate-space-after-cc-p))
#+end_src

** Meow Integration                                                  :modal:

Disable input method in non-insert state.

#+begin_src emacs-lisp
  (setq rime-disable-predicates '(meow-normal-mode-p
                                  meow-keypad-mode-p
                                  meow-motion-mode-p
                                  meow-beacon-mode-p))
#+end_src

* COMMENT Matrix client with ement

#+begin_src emacs-lisp
  (straight-use-package 'ement)

  (autoload 'ement-connect "ement" nil t)
#+end_src


* Telegram client with Telega

~telegram-libtd~ is required for this feature.

Use Telega as Telegram client.

#+begin_src emacs-lisp
  (straight-use-package '(telega
                          :host github
                          :repo "zevlg/telega.el"))

  (autoload 'telega "telega" nil t)

  (with-eval-after-load "telega"
    (setq telega-server-libs-prefix (getenv "TDLIB_PREFIX"))
    (set-face-attribute 'telega-entity-type-code nil :family 'unspecfied :inherit 'fixed-pitch-serif)
    (set-face-attribute 'telega-entity-type-pre nil :family 'unspecfied :inherit 'fixed-pitch-serif)
    (keymap-set telega-msg-button-map "SPC" nil))
#+end_src

Proxy setup

#+begin_src emacs-lisp
  (when (and
         (bound-and-true-p meomacs-socks5-proxy-host)
         (bound-and-true-p meomacs-socks5-proxy-port))
    (setq telega-proxies
          `((:server ,meomacs-socks5-proxy-host :port ,meomacs-socks5-proxy-port
                     :enable t :type (:@type "proxyTypeSocks5")))))
#+end_src

* Password management with pass

Manage password with pass

Adding following to ~$HOME/.gnupg/gpg-agent.conf~.

#+begin_example
  allow-emacs-pinentry
  allow-loopback-pinentry
#+end_example

Open pass menu with ~C-c a P~.

#+begin_src emacs-lisp
  (straight-use-package 'pass)
  (straight-use-package 'pinentry)

  (setq pass-username-fallback-on-filename t
        pass-show-keybindings nil
        epa-pinentry-mode 'loopback)

  (autoload 'password-store-get "pass")
  (autoload 'pinentry-start "pinentry")
  (autoload #'pass "pass" nil t)

  (with-eval-after-load "pass"
    (pinentry-start))
#+end_src

* Pinentry
#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+end_src

* EAT
#+begin_src emacs-lisp
  (straight-use-package
   '(eat :type git
         :host codeberg
         :repo "akib/emacs-eat"
         :files ("*.el" ("term" "term/*.el") "*.texi"
                 "*.ti" ("terminfo/e" "terminfo/e/*")
                 ("terminfo/65" "terminfo/65/*")
                 ("integration" "integration/*")
                 (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

** Buffer window rules

#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*eat\\*"
                 (display-buffer-in-side-window)
                 (window-height . 0.25)
                 (side . bottom)
                 (slot . -1)))
#+end_src

** Q to quit after process exit

#+begin_src emacs-lisp
  (add-hook 'eat-exit-hook 'view-mode)
#+end_src

** Eshell support
#+begin_src emacs-lisp
  (add-hook 'eshell-load-hook #'eat-eshell-mode)
  (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)
#+end_src

** Integration with Meow
Use ~char~ mode in ~INSERT~ state, and ~emacs~ mode in ~NORMAL~ state.  When
switching to ~INSERT~ state, move the cursor to the end of buffer.

#+begin_src emacs-lisp
  (defun meomacs-eat-meow-setup ()
    (add-hook 'meow-normal-mode-hook 'eat-emacs-mode nil t)
    (add-hook 'meow-insert-mode-hook 'eat-char-mode nil t))

  (with-eval-after-load "meow"
    (with-eval-after-load "eat"
      (keymap-set eat-char-mode-map "C-S-v" 'eat-yank)
      (advice-add 'eat-semi-char-mode :after 'eat-emacs-mode)
      (add-hook 'eat-mode-hook 'meomacs-eat-meow-setup)))
#+end_src

* Devdocs
#+begin_src emacs-lisp
  (straight-use-package 'devdocs)

  (autoload 'devdocs-lookup "devdocs" nil t)
  (global-set-key (kbd "C-h d") 'devdocs-lookup)
#+end_src

* Timezone converter

#+begin_src emacs-lisp
  (straight-use-package 'tzc)

  (setq tzc-favourite-time-zones-alist '(("UTC+0000" "UTC")
  				       ("Asia/Shanghai" "Shanghai")
  				       ("Europe/London" "London")
  				       ("Europe/Paris" "Paris")
  				       ("Asia/Tokyo" "Tokyo")
  				       ("Asia/Singapore" "Singapore")
                                         ("Europe/Moscow" "Moscow")
                                         ("Australia/Sydney" "Sydney")
                                         ("America/New_York" "New_York")
                                         ("America/Los_Angeles" "Los_Angeles")
                                         ("America/Sao_Paulo" "Sao_Paulo")))
#+end_src

* Browsers

** Open chromium with temporary profile

#+begin_src emacs-lisp
  (defun webapp-open (url)
    (interactive "sURL: ")
    (dotimes (_ (prefix-numeric-value current-prefix-arg))
      (async-shell-command (format "chromium --ozone-platform=wayland --user-data-dir=$(mktemp -d) --app=%s" url)
                           (generate-new-buffer "Chromium App"))))

  (keymap-set global-map "C-x A" 'webapp-open)
#+end_src
