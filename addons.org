#+title: Addons

Configuration for addons, additional features provided by individual packages.

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
#+end_src

* Git integration with magit & diff-hl & smerge

To manage the git repository, use builtin package ~vc~.

#+begin_src emacs-lisp
  (straight-use-package 'magit)
  (straight-use-package 'diff-hl)
  (straight-use-package 'smerge-mode)

  (autoload 'magit-status "magit" nil t)
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl-dired" nil t)
  (autoload 'smerge-mode "smerge-mode" nil t)
#+end_src

Key bindings

#+begin_src emacs-lisp
  (keymap-set global-map "C-x g" 'magit-status)
#+end_src

** COMMENT Diff-hl
Enable diff-hl in based on major modes.

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
#+end_src

* COMMENT Input method with emacs-rime

~librime~ is required for this feature.

~emacs-rime~ is the frontend of rime built with emacs input method API.

#+begin_src emacs-lisp
  (straight-use-package 'rime)

  (require 'rime)

  (setq default-input-method "rime"
        rime-emacs-module-header-root (file-name-directory (getenv "EMACS_MODULE_HEADER"))
        rime-show-candidate 'sidewindow
        rime-librime-root (meomacs-read-var "rime-librime-root")
        rime-share-data-dir (expand-file-name "~/.config/rime"))

  (with-eval-after-load "rime"
    (define-key rime-mode-map (kbd "C-`") 'rime-send-keybinding)

    (dolist (k '("TAB" "C-p" "C-n" "M-v" "C-v" "C-y" "<escape>"))
      (define-key rime-active-mode-map (kbd k) 'rime-send-keybinding))

    (define-key rime-active-mode-map (kbd "C-a") 'rime-inline-ascii))
#+end_src

Auto switch to inline ascii state when after a space after a non-ascii character.

#+begin_src emacs-lisp
  (setq rime-inline-predicates '(rime-predicate-space-after-cc-p))
#+end_src

** Meow Integration                                                  :modal:

Disable input method in non-insert state.

#+begin_src emacs-lisp
  (setq rime-disable-predicates '(meow-normal-mode-p
                                  meow-keypad-mode-p
                                  meow-motion-mode-p
                                  meow-beacon-mode-p))
#+end_src

* COMMENT Matrix client with ement

#+begin_src emacs-lisp
  (straight-use-package 'ement)

  (autoload 'ement-connect "ement" nil t)
#+end_src


* Telegram client with Telega

~telegram-libtd~ is required for this feature.

Use Telega as Telegram client.

#+begin_src emacs-lisp
  (straight-use-package '(telega
                          :host github
                          :repo "zevlg/telega.el"))

  (autoload 'telega "telega" nil t)

  (with-eval-after-load "telega"
    (setq telega-server-libs-prefix (getenv "TDLIB_PREFIX"))
    (set-face-attribute 'telega-entity-type-code nil :family 'unspecfied :inherit 'fixed-pitch-serif)
    (set-face-attribute 'telega-entity-type-pre nil :family 'unspecfied :inherit 'fixed-pitch-serif)
    (keymap-set telega-msg-button-map "SPC" nil))
#+end_src

Proxy setup

#+begin_src emacs-lisp
  (when (and
         (bound-and-true-p meomacs-socks5-proxy-host)
         (bound-and-true-p meomacs-socks5-proxy-port))
    (setq telega-proxies
          `((:server ,meomacs-socks5-proxy-host :port ,meomacs-socks5-proxy-port
                     :enable t :type (:@type "proxyTypeSocks5")))))
#+end_src

* Password management with pass

Manage password with pass

Adding following to ~$HOME/.gnupg/gpg-agent.conf~.

#+begin_example
  allow-emacs-pinentry
  allow-loopback-pinentry
#+end_example

Open pass menu with ~C-c a P~.

#+begin_src emacs-lisp
  (straight-use-package 'pass)
  (straight-use-package 'pinentry)

  (setq pass-username-fallback-on-filename t
        pass-show-keybindings nil
        epa-pinentry-mode 'loopback)

  (autoload 'password-store-get "pass")
  (autoload 'pinentry-start "pinentry")
  (autoload #'pass "pass" nil t)

  (with-eval-after-load "pass"
    (pinentry-start))
#+end_src



* Directory environment support

** Envrc

#+begin_src emacs-lisp
  (straight-use-package 'envrc)

  (require 'envrc)

  (setq envrc-show-summary-in-minibuffer nil)

  (add-hook 'after-init-hook 'envrc-global-mode)
#+end_src

** COMMENT Direnv Mode

#+begin_src emacs-lisp
  (straight-use-package 'direnv)

  (setq direnv-always-show-summary nil)

  (autoload 'direnv-mode "direnv" nil t)

  (direnv-mode 1)
#+end_src

* Pinentry
#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+end_src

* EAT
#+begin_src emacs-lisp
  (straight-use-package
   '(eat :type git
         :host codeberg
         :repo "akib/emacs-eat"
         :files ("*.el" ("term" "term/*.el") "*.texi"
                 "*.ti" ("terminfo/e" "terminfo/e/*")
                 ("terminfo/65" "terminfo/65/*")
                 ("integration" "integration/*")
                 (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

** Eshell support
#+begin_src emacs-lisp
  (add-hook 'eshell-load-hook #'eat-eshell-mode)
  (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)
#+end_src

** Integration with Meow
Use ~char~ mode in ~INSERT~ state, and ~emacs~ mode in ~NORMAL~ state.  When
switching to ~INSERT~ state, move the cursor to the end of buffer.

#+begin_src emacs-lisp
  (defun meomacs-eat-meow-setup ()
    (add-hook 'meow-normal-mode-hook 'eat-emacs-mode nil t)
    (add-hook 'meow-insert-mode-hook 'eat-char-mode nil t))

  (with-eval-after-load "eat"
    (keymap-set eat-char-mode-map "C-S-v" 'eat-yank)
    (advice-add 'eat-semi-char-mode :after 'eat-emacs-mode)
    (add-hook 'eat-mode-hook 'meomacs-eat-meow-setup))
#+end_src

* GPTEL
#+begin_src emacs-lisp
  (straight-use-package '(gptel :host github :repo "karthink/gptel"))

  (autoload 'gptel "gptel" nil t)

  (setq gptel-use-curl t
        gptel-model 'gpt-4o
        gptel-default-mode 'org-mode
        gptel-api-key (lambda () (meomacs-read-var "gptel-api-key")))

  (gptel-make-openai "DeepSeek"
    :host "api.deepseek.com"
    :endpoint "/chat/completions"
    :stream t
    :key (lambda () (meomacs-read-var "deepseek-api-key"))
    :models '(deepseek-chat deepseek-coder))

  (with-eval-after-load "gptel"
    (require 'gptel-curl))
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (defvar gptel-map
    (let ((m (make-keymap)))
      (suppress-keymap m t)
      (keymap-set m "n" 'gptel)
      (keymap-set m "c" 'gptel-menu)
      (keymap-set m "a" 'gptel-add)
      m))

  (defalias 'gptel-map gptel-map)

  (keymap-set global-map "C-c c" 'gptel-map)

  (with-eval-after-load "gptel"
    (setq gptel-directives
          '((default . "You are a large language model living in Emacs and a helpful assistant. Respond concisely.")
            (programming . "You are a large language model and a careful programmer. Provide code and only code as output without any additional text, prompt, note. Provide code without markdown syntax and triple backticks. Provide code without including any of the reference code provided, unless it's a rewriting. ")
            (writing . "You are a large language model and a writing assistant. Respond concisely.")
            (chat . "You are a large language model and a conversation partner. Respond concisely."))))
#+end_src

* Timezone converter

#+begin_src emacs-lisp
  (straight-use-package 'tzc)


  (setq tzc-favourite-time-zones-alist '(("UTC+0000" "UTC")
  				       ("Asia/Kolkata" "Kolkata")
  				       ("America/New_York" "New York")
  				       ("Europe/London" "London")
  				       ("Europe/Berlin" "Berlin")
  				       ("Asia/Shanghai" "Shanghai")
  				       ("Asia/Tokyo" "Tokyo")))
#+end_src

* Go translate

#+begin_src emacs-lisp
  (straight-use-package 'go-translate)

  (require 'go-translate)

  (setq gt-preset-translators
          `((Default . ,(gt-translator
                         :taker (gt-taker :langs '(en zh) :text 'word :prompt nil)
                         :engines  (gt-youdao-dict-engine :if 'word)
                         :render (gt-posframe-pop-render :if 'word :frame-params (list :height 40 :border-width 5))))))

  (keymap-set global-map "C-x T" 'gt-do-translate)
#+end_src


* Browsers

** Refresh Firefox

It works with wlrctl

#+begin_src emacs-lisp
  (defun firefox-refresh ()
    (interactive)
    (shell-command "wlrctl window focus firefox && wlrctl keyboard type R modifiers CTRL && wlrctl window focus emacs"))

  (keymap-set global-map "C-x R" 'firefox-refresh)
#+end_src

** Open firefox window with temporary profile and without decoration and menu

#+begin_src emacs-lisp
  (defun webapp-open (url)
    (interactive "sURL: ")
    (async-shell-command (format "chromium --ozone-platform=wayland --user-data-dir=$(mktemp -d) --app=%s" url)
                         (generate-new-buffer "Chromium App")))

  (keymap-set global-map "C-x A" 'webapp-open)
#+end_src
