#+title: Addons

Configuration for addons, additional features provided by individual packages.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Git integration with magit & diff-hl & smerge

To manage the git repository, use builtin package ~vc~.

#+begin_src emacs-lisp
  (straight-use-package 'magit)
  (straight-use-package 'diff-hl)
  (straight-use-package 'smerge-mode)

  (autoload 'magit "magit" nil t)
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl-dired" nil t)
  (autoload 'smerge-mode "smerge-mode" nil t)
#+end_src

Enable diff-hl in based on major modes.

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
#+end_src

Enable smerge mode with =C-c t m=.

#+begin_src emacs-lisp
  (define-key toggle-map "m" 'smerge-mode)
#+end_src

* Input method with emacs-rime

~librime~ is required for this feature.

~emacs-rime~ is the frontend of rime built with emacs input method API.

#+begin_src emacs-lisp
  (when (and (getenv "EMACS_MODULE_HEADER")
             (getenv "LIBRIME_ROOT"))
    (straight-use-package 'rime)

    (setq default-input-method "rime"
          rime-emacs-module-header-root (file-name-directory (getenv "EMACS_MODULE_HEADER"))
          rime-librime-root (getenv "LIBRIME_ROOT")
          rime-share-data-dir "~/.local/share/fcitx5/rime")

    (with-eval-after-load "rime"
      (define-key rime-mode-map (kbd "C-`") 'rime-send-keybinding)

      (dolist (k '("TAB" "C-p" "C-n" "C-v" "C-y"))
        (define-key rime-active-mode-map (kbd k) 'rime-send-keybinding))

      (define-key rime-active-mode-map (kbd "C-a") 'rime-inline-ascii)))
#+end_src

Auto switch to inline ascii state when after a space after a non-ascii character.

#+begin_src emacs-lisp
  (setq rime-inline-predicates '(rime-predicate-space-after-cc-p))
#+end_src

** Meow Integration                                                  :modal:

Disable input method in non-insert state.

#+begin_src emacs-lisp
  (setq rime-disable-predicates '(meow-normal-mode-p
                                  meow-keypad-mode-p
                                  meow-motion-mode-p
                                  meow-beacon-mode-p))
#+end_src

* Matrix client with ement

#+begin_src emacs-lisp
  (straight-use-package 'ement)

  (autoload 'ement-connect "ement" nil t)

  (global-set-key (kbd "C-c a m") 'ement-connect)
#+end_src


* Telegram client with Telega

~telegram-libtd~ is required for this feature.

Use Telega as Telegram client.

#+begin_src emacs-lisp
  (straight-use-package '(telega
                          :host github
                          :repo "zevlg/telega.el"))

  (autoload 'telega "telega" nil t)

  (global-set-key (kbd "C-c a t") 'telega)

  (with-eval-after-load "telega"
    (set-face-attribute 'telega-entity-type-code nil :family 'unspecfied :inherit 'fixed-pitch-serif)
    (set-face-attribute 'telega-entity-type-pre nil :family 'unspecfied :inherit 'fixed-pitch-serif)
    (define-key telega-msg-button-map (kbd "SPC") nil))
#+end_src

Proxy setup

#+begin_src emacs-lisp
  (when (and
         (bound-and-true-p meomacs-socks5-proxy-host)
         (bound-and-true-p meomacs-socks5-proxy-port))
    (setq telega-proxies
          `((:server ,meomacs-socks5-proxy-host :port ,meomacs-socks5-proxy-port
                     :enable t :type (:@type "proxyTypeSocks5")))))
#+end_src

* Password management with pass

Manage password with pass

Adding following to ~$HOME/.gnupg/gpg-agent.conf~.

#+begin_example
  allow-emacs-pinentry
  allow-loopback-pinentry
#+end_example

Open pass menu with =C-c a p=.

#+begin_src emacs-lisp
  (straight-use-package 'pass)
  (straight-use-package 'pinentry)

  (setq pass-username-fallback-on-filename t
        pass-show-keybindings nil)

  (autoload #'pass "pass" nil t)

  (global-set-key (kbd "C-c a p") 'pass)

  (with-eval-after-load "pass"
    (pinentry-start))
#+end_src

* Directory environment support with direnv

#+begin_src emacs-lisp
  (straight-use-package 'direnv)

  (setq direnv-always-show-summary nil)

  (define-key toggle-map "d" 'direnv-mode)

  (require 'direnv)
  (direnv-mode)
#+end_src

* Pinentry
#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+end_src

* EAT
#+begin_src emacs-lisp
  (straight-use-package
   '(eat :type git
         :host codeberg
         :repo "akib/emacs-eat"
         :files ("*.el" ("term" "term/*.el") "*.texi"
                 "*.ti" ("terminfo/e" "terminfo/e/*")
                 ("terminfo/65" "terminfo/65/*")
                 ("integration" "integration/*")
                 (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

** Key bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c t e") 'eshell)
  (global-set-key (kbd "C-c t E") 'eat)
#+end_src

** Eshell support
#+begin_src emacs-lisp
  (add-hook 'eshell-load-hook #'eat-eshell-mode)
  (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)
#+end_src

** Integration with Meow
Use ~char~ mode in ~INSERT~ state, and ~emacs~ mode in ~NORMAL~ state.  When
switching to ~INSERT~ state, move the cursor to the end of buffer.

#+begin_src emacs-lisp
  (defun meomacs-eat-meow-setup ()
    (add-hook 'meow-normal-mode-hook 'eat-emacs-mode nil t)
    (add-hook 'meow-insert-mode-hook 'eat-char-mode nil t))

  (with-eval-after-load "eat"
    (define-key eat-char-mode-map (kbd "C-y") 'eat-yank)
    ;; Replace semi-char mode with emacs mode
    (advice-add 'eat-semi-char-mode :after 'eat-emacs-mode)
    (add-hook 'eat-mode-hook 'meomacs-eat-meow-setup))
#+end_src

* ChatGPT
#+begin_src emacs-lisp
  (straight-use-package '(gptel :host github :repo "karthink/gptel"))
  (setq gptel-use-curl t)
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a g") 'gptel)

  (with-eval-after-load "gptel"
    (define-key gptel-mode-map (kbd "C-<return>") 'gptel-send)
    (define-key gptel-mode-map (kbd "M-RET") 'gptel-menu))
#+end_src
