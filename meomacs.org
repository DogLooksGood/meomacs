#+title: Meomacs - A simple Emacs configuration with modal editing

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Editor basics

** Pakcage management with Straight

Straight.el is used for package management.
Bind some keys for quick operations.

#+begin_src emacs-lisp
  (defvar straight-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap "c" 'straight-check-package)
      (define-key keymap "C" 'straight-check-all)
      (define-key keymap "p" 'straight-pull-package)
      (define-key keymap "P" 'straight-pull-all)
      (define-key keymap "b" 'straight-rebuild-package)
      (define-key keymap "B" 'straight-rebuild-all)
      keymap))

  (defalias 'straight-keymap straight-keymap)
  (global-set-key (kbd "C-c p") 'straight-keymap)
#+end_src

** Better defaults

#+begin_src emacs-lisp
  (setq-default
   ;; Don't create lockfiles
   create-lockfiles nil

   ;; prefer UTF8
   buffer-file-coding-system 'utf-8-unix
   default-file-name-coding-system 'utf-8-unix
   default-keyboard-coding-system 'utf-8-unix
   default-process-coding-system '(utf-8-unix . utf-8-unix)
   default-sendmail-coding-system 'utf-8-unix
   default-terminal-coding-system 'utf-8-unix

   ;; Add newline at bottom of file
   require-final-newline t

   ;; Backup setups
   ;; We use temporary directory /tmp for backup files
   ;; More versions should be saved
   backup-directory-alist `((".*" . ,temporary-file-directory))
   auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t

   ;; Skip prompt for xref find definition
   xref-prompt-for-identifier nil

   ;; Don't wait for keystrokes display
   echo-keystrokes 0.01

   ;; Disable margin for overline and underline
   overline-margin 0
   underline-minimum-offset 0

   ;; Allow resizing frame by pixels
   frame-resize-pixelwise t

   ;; Better scroll behavior
   mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))
   mouse-wheel-progressive-speed nil

   ;; Disable copy region blink
   copy-region-blink-delay 0
 
   ;; Use short answer when asking yes or no
   read-answer-short t

   ;; Always follow link
   vc-follow-symlinks t

   ;; Use custom.el as custom file
   custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** Modal editing with Meow

This configuration sticks with Meow for modal editing.

*** Normal
Tweaking following table for key bindings in normal state.

#+TBLNAME: normal-keybindings
| key      | command                   |
|----------+---------------------------|
| ?        | meow-keypad-describe-key  |
| *        | meow-expand-0             |
| =        | meow-expand-9             |
| !        | meow-expand-8             |
| [        | meow-expand-7             |
| ]        | meow-expand-6             |
| {        | meow-expand-5             |
| +        | meow-expand-4             |
| }        | meow-expand-3             |
| )        | meow-expand-2             |
| (        | meow-expand-1             |
| 1        | select-window-1           |
| 2        | select-window-2           |
| 3        | select-window-3           |
| 4        | select-window-4           |
| 5        | select-window-5           |
| 6        | select-window-6           |
| 7        | select-window-7           |
| 8        | select-window-8           |
| 9        | select-window-9           |
| 0        | select-window-0           |
| -        | negative-argument         |
| ;        | meow-reverse              |
| ,        | meow-inner-of-thing       |
| .        | meow-bounds-of-thing      |
| <        | meow-beginning-of-thing   |
| >        | meow-end-of-thing         |
| a        | meow-append               |
| A        | meow-open-below           |
| b        | meow-back-word            |
| B        | meow-back-symbol          |
| c        | meow-change               |
| d        | meow-delete               |
| D        | meow-backward-delete      |
| e        | meow-line                 |
| E        | meow-goto-line            |
| f        | meow-find                 |
| g        | meow-cancel-selection     |
| G        | meow-grab                 |
| h        | meow-left                 |
| H        | meow-left-expand          |
| i        | meow-insert               |
| I        | meow-open-above           |
| j        | meow-join                 |
| k        | meow-kill                 |
| l        | meow-till                 |
| m        | meow-mark-word            |
| M        | meow-mark-symbol          |
| n        | meow-next                 |
| N        | meow-next-expand          |
| o        | meow-block                |
| O        | meow-to-block             |
| p        | meow-prev                 |
| P        | meow-prev-expand          |
| q        | meow-quit                 |
| r        | meow-replace              |
| R        | meow-swap-grab            |
| s        | meow-search               |
| t        | meow-right                |
| T        | meow-right-expand         |
| u        | meow-undo                 |
| U        | meow-undo-in-selection    |
| v        | meow-visit                |
| w        | meow-next-word            |
| W        | meow-next-symbol          |
| x        | meow-save                 |
| X        | meow-sync-grab            |
| y        | meow-yank                 |
| z        | meow-pop-selection        |
| $        | repeat                    |
| '        | repeat                    |
| &        | meow-query-replace-regexp |
| %        | meow-query-replace        |
| <escape> | ignore                    |

*** Motion

Tweaking following table for key bindings in motion state.

#+TBLNAME: motion-keybindings
|      key | command         |
|----------+-----------------|
| <escape> | ignore          |
|        1 | select-window-1 |
|        2 | select-window-2 |
|        3 | select-window-3 |
|        4 | select-window-4 |
|        5 | select-window-5 |
|        6 | select-window-6 |
|        7 | select-window-7 |
|        8 | select-window-8 |
|        9 | select-window-9 |
|        0 | select-window-0 |

*** Leader

Tweaking following table for key bindings in leader keymap.

#+tblname: leader-keybindings
| key | command              | description |
|-----+----------------------+-------------|
| e   | eval-last-sexp       |             |
| 1   | meow-digit-argument  |             |
| 2   | meow-digit-argument  |             |
| 3   | meow-digit-argument  |             |
| 4   | meow-digit-argument  |             |
| 5   | meow-digit-argument  |             |
| 6   | meow-digit-argument  |             |
| 7   | meow-digit-argument  |             |
| 8   | meow-digit-argument  |             |
| 9   | meow-digit-argument  |             |
| 0   | meow-digit-argument  |             |
| s   | split-window-right   |             |
| -   | split-window-below   |             |
| ?   | meow-cheatsheet      |             |
| a   | dispatch: C-c a      | Addons      |
| t   | dispatch: C-c t      | Toggles     |
| p   | dispatch: C-x p      | Projects    |
| P   | dispatch: C-c p      | Straight    |
| r   | dispatch: C-c r      | Org Roam    |
| i   | imenu                |             |
| o   | delete-other-windows |             |
| k   | kill-current-buffer  |             |

*** Initialization

#+header: :var normal-keybindings=normal-keybindings :var motion-keybindings=motion-keybindings :var leader-keybindings=leader-keybindings
#+begin_src emacs-lisp
  (straight-use-package 'meow)

  (require 'meow)

  (let ((parse-def (lambda (x)
                     (cons (format "%s" (car x))
                           (if (string-prefix-p "dispatch:" (cadr x))
                               (string-trim (substring (cadr x) 9))
                             (intern (cadr x))))))
        (parse-remap (lambda (x) (cons (format "%s" (car x)) (format "%s%s" meow-motion-remap-prefix (car x))))))
    (apply #'meow-normal-define-key (mapcar parse-def normal-keybindings))
    (apply #'meow-motion-overwrite-define-key (mapcar parse-def motion-keybindings))
    (apply #'meow-leader-define-key (mapcar parse-def leader-keybindings))
    (apply #'meow-leader-define-key (mapcar parse-remap motion-keybindings)))

  (meow-global-mode 1)
  (meow-setup-indicator)
#+end_src

** Window management

Switch window by pressing the number showned in the mode line.

#+begin_src emacs-lisp
  (straight-use-package '(window-numbering
                          :repo "DogLooksGood/window-numbering.el"
                          :host github
                          :type git))


  (require 'window-numbering)
  (window-numbering-mode 1)

  (defun meomacs-window-numbering-modeline ()
    (concat " "
            (let ((n (window-numbering-get-number)))
              (alist-get
               n
               '((0 . "üÑå")
                 (1 . "‚ù∂")
                 (2 . "‚ù∑")
                 (3 . "‚ù∏")
                 (4 . "‚ùπ")
                 (5 . "‚ù∫")
                 (6 . "‚ùª")
                 (7 . "‚ùº")
                 (8 . "‚ùΩ")
                 (9 . "‚ùæ"))))))

  (let ((modeline-segment '(:eval (meomacs-window-numbering-modeline))))
    (unless (member modeline-segment mode-line-format)
      (setq-default mode-line-format (cons modeline-segment mode-line-format))))
#+end_src

** Auto pairs with Smartparens

#+begin_src emacs-lisp
  (straight-use-package 'smartparens)

  (require 'smartparens)

  (add-hook 'prog-mode-hook 'smartparens-mode)
  (add-hook 'conf-mode-hook 'smartparens-mode)

  ;; setup for emacs-lisp
  (sp-with-modes '(emacs-lisp-mode)
    (sp-local-pair "'" nil :actions nil))
#+end_src

** Completions
*** Minibuffer completion reading with Vertico & Orderless & Marginalia

- Vertico provides a better UX for completion reading.
- Orderless provides a completion style, which allows you to search with orderless segments.
- Marginalia provides helpful messages in completion.

#+begin_src emacs-lisp
  (straight-use-package 'vertico)
  (straight-use-package 'orderless)
  (straight-use-package 'marginalia)

  (require 'vertico)
  (require 'orderless)

  (vertico-mode 1)
  (marginalia-mode 1)
#+end_src

Enable orderless for minibuffer completion.

#+begin_src emacs-lisp
  (defun meomacs--vertico-init-minibuffer ()
    (setq-local completion-styles '(basic orderless)))

  (add-hook 'minibuffer-setup-hook 'meomacs--vertico-init-minibuffer)
#+end_src

Do "delete" instead of "kill" when pressing =M-DEL=.

#+begin_src emacs-lisp
  (defun meomacs-backward-delete-sexp ()
    "Backward delete sexp.

  Used in minibuffer, replace the the default kill behavior with M-DEL."
    (interactive)
    (save-restriction
      (narrow-to-region (minibuffer-prompt-end) (point-max))
      (delete-region
       (save-mark-and-excursion
         (backward-sexp)
         (point))
       (point))))

  (define-key minibuffer-mode-map (kbd "M-DEL") #'meomacs-backward-delete-sexp)
#+end_src

*** Completion at point with Company

#+begin_src emacs-lisp
  (straight-use-package 'company)

  (autoload 'company-mode "company" nil t)

  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'conf-mode-hook 'company-mode)
#+end_src

A setup for vim-like behavior.  Completion will popup automatically, =SPC= and =RET= will do insertion even though the popup is available.

| action                    | key |
|---------------------------+-----|
| completion at point       | TAB |
| previous candidate        | C-p |
| next candidate            | C-n |
| next template placeholder | RET |

#+begin_src emacs-lisp
  (with-eval-after-load "company"
    (require 'company-tng)

    (add-hook 'company-mode-hook 'company-tng-mode)

    (define-key company-active-map [tab] 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)

    ;; Free SPC and RET, popup will no longer interrupt typing.
    (define-key company-active-map [escape] nil)
    (define-key company-active-map [return] nil)
    (define-key company-active-map (kbd "RET") nil)
    (define-key company-active-map (kbd "SPC") nil))
#+end_src

** Templating with yasnippet
Expand template with =TAB=. Jump between the placeholders with =TAB= and =S-TAB=.

#+begin_src emacs-lisp
  (straight-use-package 'yasnippet)
  (straight-use-package 'yasnippet-snippets)

  (require 'yasnippet)

  (yas-global-mode 1)
#+end_src
** Git integration with magit & diff-hl & smerge

To manage the git repository, use builtin package ~vc~.

#+begin_src emacs-lisp
  (straight-use-package 'magit)
  (straight-use-package 'diff-hl)
  (straight-use-package 'smerge-mode)

  (autoload 'magit "magit" nil t)
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl-dired" nil t)
  (autoload 'smerge-mode "smerge-mode" nil t)
#+end_src

Enable diff-hl in based on major modes.

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
#+end_src

Enable smerge mode after ~find-file~.

#+begin_src emacs-lisp
  (add-hook 'find-file-hook 'smerge-mode)
#+end_src

** Project management with project.el

To find files/buffers and apply commands on project, use builtin package ~project~.

#+begin_src emacs-lisp
  (setq project-switch-commands '((project-find-file "Find file")
                                  (project-find-regexp "Find regexp")
                                  (project-dired "Dired")
                                  (project-eshell "Eshell")
                                  (shell "Shell")
                                  (magit "Magit")))

  (with-eval-after-load "project"
    (define-key project-prefix-map "s" 'shell)
    (define-key project-prefix-map "m" 'magit))
#+end_src

** Searching with rg
#+begin_src emacs-lisp
  (straight-use-package 'rg)

  (autoload 'rg-project "wgrep" nil t)
  (autoload 'rg-project "rg" nil t)

  (with-eval-after-load "wgrep"
    (define-key wgrep-mode-map (kbd "C-c C-c") #'wgrep-finish-edit))

  (define-key project-prefix-map "r" 'rg-project)
#+end_src

* Look & Feel
** Disabling some components
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

** Themes
#+name: themes
- [X] modus-operandi
- [X] modus-vivendi
- [ ] deeper-blue

Create a command ~meomacs-next-theme~ at =C-c t t= to switch themes between listed above.

#+header: :var themes=themes
#+begin_src emacs-lisp
  (require 'cl-lib)

  (defvar meomacs-themes nil
    "Themes to use.")

  (setq meomacs-themes
        (thread-last
          themes
          (mapcar 'car)
          (cl-remove-if-not (lambda (s) (string-prefix-p "[X] " s)))
          (mapcar (lambda (s) (intern (substring s 4))))))

  (defun meomacs-next-theme ()
    (interactive)
    (mapc 'disable-theme custom-enabled-themes)
    (when meomacs-themes
      (message "Load theme: %s" (car meomacs-themes))
      (load-theme (car meomacs-themes) t)
      (setq meomacs-themes (append (cdr meomacs-themes) (list (car meomacs-themes))))))

  (global-set-key (kbd "C-c t t") 'meomacs-next-theme)

  (unless custom-enabled-themes
    (meomacs-next-theme))
#+end_src

** Fonts

*** Font resizing
Increasing/decreasing font size with =M-+= / =M--=.

#+begin_src emacs-lisp
  (require 'cl-lib)

  (defvar meomacs-font-size 11
    "Current font size.")

  (defvar meomacs-resize-font-sizes
    '(10 11 12 13 14 15 16)
    "Font sizes for resizing.")

  (defun meomacs-increase-font-size ()
    (interactive)
    (if-let ((size (cl-find-if (lambda (s)
                                 (> s meomacs-font-size))
                               meomacs-resize-font-sizes)))
        (progn (setq meomacs-font-size size)
               (meomacs-load-base-font)
               (meomacs-load-face-font)
               (meomacs-load-ext-font)
               (message "Font size: %s" size))
      (message "Using biggest font size.")))

  (defun meomacs-decrease-font-size ()
    (interactive)
    (if-let ((size (cl-find-if (lambda (s)
                                 (< s meomacs-font-size))
                               (reverse meomacs-resize-font-sizes))))
        (progn (setq meomacs-font-size size)
               (meomacs-load-base-font)
               (meomacs-load-face-font)
               (meomacs-load-ext-font)
               (message "Font size: %s" size))
      (message "Using smallest font size.")))

  (global-set-key (kbd "M-+") 'meomacs-increase-font-size)
  (global-set-key (kbd "M--") 'meomacs-decrease-font-size)
#+end_src

*** Font Families
#+tblname: fonts
| key      | font                    | where to apply                        |
|----------+-------------------------+---------------------------------------|
| default  | MesloLGM Nerd Font Mono | default font for ascii characters     |
| unicode  | LXGW WenKai             | default font for non-ascii characters |
| modeline | MesloLGL Nerd Font Mono | modeline                              |
| fixed    | Sarasa Mono SC          | code blocks and tables in markups     |
| variable | ETBembo                 | texts in markups                      |

#+header: :var fonts=fonts
#+begin_src emacs-lisp
    (defun meomacs--get-font-family (key)
      (car (alist-get key fonts nil nil #'string-equal)))

    (defun meomacs--get-font-spec (key)
      (format "%s-%d"
              (meomacs--get-font-family key)
              meomacs-font-size))

    (defun meomacs-load-base-font ()
      "Load the default font for ascii characters."
      (let* ((font-spec (meomacs--get-font-spec "default")))
        (set-frame-parameter nil 'font font-spec)
        (add-to-list 'default-frame-alist (cons 'font font-spec))))

    (defun meomacs-load-face-font ()
      "Load fonts used in faces."
      (let ((modeline-font-spec (meomacs--get-font-spec "modeline"))
            (variable-font-spec (meomacs--get-font-spec "variable"))
            (fixed-font-spec (meomacs--get-font-spec "fixed")))
        (set-face-attribute 'variable-pitch nil :font variable-font-spec :height 1.1)
        (set-face-attribute 'fixed-pitch nil :font fixed-font-spec)
        (set-face-attribute 'fixed-pitch-serif nil :font fixed-font-spec)
        (set-face-attribute 'mode-line nil :font modeline-font-spec)
        (set-face-attribute 'mode-line-inactive nil :font modeline-font-spec)))

    (defun meomacs-load-ext-font ()
      "Load fonts used for non-ascii characters."
      (let ((font (frame-parameter nil 'font))
            (font-spec (font-spec :family (meomacs--get-font-family "unicode"))))
        (dolist (charset '(kana han hangul cjk-misc bopomofo symbol))
          (set-fontset-font font charset font-spec))))

    ;; Only have font setup in GUI
    (when window-system
      (meomacs-load-base-font)
      (meomacs-load-face-font)
      (meomacs-load-ext-font)

      ;; Setup faces after creating new frame
      (add-hook 'after-make-frame-functions
                (lambda ()
                  (meomacs-load-face-font)
                  (meomacs-load-ext-font))))
#+end_src

* Writing
** Org
*** Org Roam
#+begin_src emacs-lisp
  (straight-use-package 'org-roam)

  (setq org-roam-directory (expand-file-name "~/Org"))

  (defvar org-roam-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap "l" 'org-roam-buffer-toggle)
      (define-key keymap "f" 'org-roam-node-find)
      (define-key keymap "g" 'org-roam-graph)
      (define-key keymap "i" 'org-roam-node-insert)
      (define-key keymap "c" 'org-roam-capture)
      (define-key keymap "s" 'org-roam-db-sync)
      keymap))

  (defalias 'org-roam-keymap org-roam-keymap)

  (global-set-key (kbd "C-c r") 'org-roam-keymap)

  (with-eval-after-load "org-roam"
    (org-roam-setup))
#+end_src

*** Good old template shortcut

#+begin_src emacs-lisp
  (with-eval-after-load "org"
    (require 'org-tempo))
#+end_src

*** Using variable pitch font

Enable ~variable-pitch-mode~.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'variable-pitch-mode)

  (with-eval-after-load "org"
    ;; Use fixed pitch for table and code
    (custom-set-faces
     '(org-table ((t :inherit 'fixed-pitch)))
     '(org-code ((t :inherit 'fixed-pitch)))
     '(org-block ((t :inherit 'fixed-pitch)))
     '(org-checkbox ((t :inherit 'fixed-pitch :background nil :box nil)))
     '(org-latex-and-related ((t (:inherit 'fixed-pitch))))))
#+end_src

*** Better structure indication with org-visual-outline

~org-visual-outline~ provides a better visual feedback for document structure.

#+begin_src emacs-lisp
  (straight-use-package '(org-visual-outline
                          :repo "legalnonsense/org-visual-outline"
                          :host github
                          :type git))

  (autoload 'org-visual-indent-mode "org-visual-indent")

  (add-hook 'org-mode-hook 'org-visual-indent-mode)
#+end_src

*** Ricing markups

#+begin_src emacs-lisp
  (defun meomacs--org-prettify-symbols ()
    (setq-local prettify-symbols-alist
                '(("#+begin_src" . "¬ª")
                  ("#+end_src" . "¬´")
                  ("#+begin_example" . "¬ª")
                  ("#+end_example" . "¬´")
                  ("#+begin_quote" . "‚Äü")
                  ("#+end_quote" . "‚Äü")
                  ("[X]" . "‚òë")
                  ("[ ]" . "‚òê")))
    (prettify-symbols-mode 1))

  (add-hook 'org-mode-hook 'meomacs--org-prettify-symbols)

  (setq org-hide-emphasis-markers t)

  (with-eval-after-load "org"
    (add-to-list 'org-emphasis-alist '("=" (:box (:line-width -2 :color "gray50" :style released-button) :inherit org-verbatim))))
#+end_src

* Addons
** Input method with emacs-rime

~librime~ is required for this feature.

~emacs-rime~ is the frontend of rime built with emacs input method API.

#+begin_src emacs-lisp
  (straight-use-package 'rime)

  (setq default-input-method "rime")
#+end_src

Disable input method in non-insert state.

#+begin_src emacs-lisp
  (setq rime-disable-predicates '(meow-normal-mode-p
                                  meow-keypad-mode-p
                                  meow-motion-mode-p
                                  meow-beacon-mode-p))
#+end_src

Auto switch to inline ascii state when after a space after a non-ascii character.

#+begin_src emacs-lisp
  (setq rime-inline-predicates '(rime-predicate-space-after-cc-p))
#+end_src

** Telegram client with Telega

~telegram-libtd~ is required for this feature.

Use Telega as Telegram client.

#+begin_src emacs-lisp
  (straight-use-package 'telega)

  (autoload 'telega "telega" nil t)

  (global-set-key (kbd "C-c a t") 'telega)
#+end_src
