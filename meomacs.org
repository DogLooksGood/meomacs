#+title: Meomacs - A simple Emacs configuration with modal editing

* Modal editing with Meow

This configuration sticks with Meow for modal editing.

** Modal key bindings
*** Normal
#+TBLNAME: normal-keybindings
| key      | command                 |
|----------+-------------------------|
| 0        | meow-expand-0           |
| 9        | meow-expand-9           |
| 8        | meow-expand-8           |
| 7        | meow-expand-7           |
| 6        | meow-expand-6           |
| 5        | meow-expand-5           |
| 4        | meow-expand-4           |
| 3        | meow-expand-3           |
| 2        | meow-expand-2           |
| 1        | meow-expand-1           |
| -        | negative-argument       |
| ;        | meow-reverse            |
| ,        | meow-inner-of-thing     |
| .        | meow-bounds-of-thing    |
| [        | meow-beginning-of-thing |
| ]        | meow-end-of-thing       |
| a        | meow-append             |
| A        | meow-open-below         |
| b        | meow-back-word          |
| B        | meow-back-symbol        |
| c        | meow-change             |
| d        | meow-delete             |
| D        | meow-backward-delete    |
| e        | meow-next-word          |
| E        | meow-next-symbol        |
| f        | meow-find               |
| g        | meow-cancel-selection   |
| G        | meow-grab               |
| h        | meow-left               |
| H        | meow-left-expand        |
| i        | meow-insert             |
| I        | meow-open-above         |
| j        | meow-next               |
| J        | meow-next-expand        |
| k        | meow-prev               |
| K        | meow-prev-expand        |
| l        | meow-right              |
| L        | meow-right-expand       |
| m        | meow-join               |
| n        | meow-search             |
| o        | meow-block              |
| O        | meow-to-block           |
| p        | meow-yank               |
| q        | meow-quit               |
| Q        | meow-goto-line          |
| r        | meow-replace            |
| R        | meow-swap-grab          |
| s        | meow-kill               |
| t        | meow-till               |
| u        | meow-undo               |
| U        | meow-undo-in-selection  |
| v        | meow-visit              |
| w        | meow-mark-word          |
| W        | meow-mark-symbol        |
| x        | meow-line               |
| X        | meow-goto-line          |
| y        | meow-save               |
| Y        | meow-sync-grab          |
| z        | meow-pop-selection      |
| '        | repeat                  |
| <escape> | ignore                  |

*** Motion
#+TBLNAME: motion-keybindings
|      key | command             |
|----------+---------------------|
|        j | next-line           |
|        k | previous-line       |
| <escape> | ignore              |

*** Leader
#+TBLNAME: leader-keybindings
| key | command             |
|-----+---------------------|
|   e | eval-last-sexp      |
|   1 | meow-digit-argument |
|   2 | meow-digit-argument |
|   3 | meow-digit-argument |
|   4 | meow-digit-argument |
|   5 | meow-digit-argument |
|   6 | meow-digit-argument |
|   7 | meow-digit-argument |
|   8 | meow-digit-argument |
|   9 | meow-digit-argument |
|   0 | meow-digit-argument |
|   ? | meow-cheatsheet     |

#+header: :var normal-keybindings=normal-keybindings :var motion-keybindings=motion-keybindings :var leader-keybindings=leader-keybindings
#+begin_src emacs-lisp
  (straight-use-package 'meow)

  (require 'meow)

  (let ((parse-def (lambda (x) (cons (format "%s" (car x)) (intern (cadr x)))))
        (parse-remap (lambda (x) (cons (format "%s" (car x)) (format "%s%s" meow-motion-remap-prefix (car x))))))
    (apply #'meow-normal-define-key (mapcar parse-def normal-keybindings))
    (apply #'meow-motion-overwrite-define-key (mapcar parse-def motion-keybindings))
    (apply #'meow-leader-define-key (mapcar parse-def leader-keybindings))
    (apply #'meow-leader-define-key (mapcar parse-remap motion-keybindings)))

  (meow-global-mode 1)
  (meow-setup-indicator)
#+end_src

* Completions

** Minibuffer completion reading with Vertico & Orderless & Marginalia

- Vertico provides a better UX for completion reading.
- Orderless provides a completion style, which allows you to search with orderless segments.
- Marginalia provides helpful messages in completion.

#+begin_src emacs-lisp
  (straight-use-package 'vertico)
  (straight-use-package 'orderless)
  (straight-use-package 'marginalia)

  (require 'vertico)
  (require 'orderless)

  (vertico-mode 1)
  (marginalia-mode 1)
#+end_src

Enable orderless for minibuffer completion.

#+begin_src emacs-lisp
  (defun meomacs--vertico-init-minibuffer ()
    (setq-local completion-styles '(basic orderless)))

  (add-hook 'minibuffer-setup-hook 'meomacs--vertico-init-minibuffer)
#+end_src

Do "delete" instead of "kill" when pressing =M-DEL=.

#+begin_src emacs-lisp
  (defun meomacs-backward-delete-sexp ()
    "Backward delete sexp.

  Used in minibuffer, replace the the default kill behavior with M-DEL."
    (interactive)
    (save-restriction
      (narrow-to-region (minibuffer-prompt-end) (point-max))
      (delete-region
       (save-mark-and-excursion
         (backward-sexp)
         (point))
       (point))))

  (define-key minibuffer-mode-map (kbd "M-DEL") #'meomacs-backward-delete-sexp)
#+end_src

** Completion at point with Company

#+begin_src emacs-lisp
  (straight-use-package 'company)

  (autoload 'company-mode "company" nil t)

  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'conf-mode-hook 'company-mode)
#+end_src

A setup for vim-like behavior.  Completion will popup automatically, =SPC= and =RET= will do insertion even though the popup is available.

| action                    | key |
|---------------------------+-----|
| completion at point       | TAB |
| previous candidate        | C-p |
| next candidate            | C-n |
| next template placeholder | RET |

#+begin_src emacs-lisp
  (with-eval-after-load "company"
    (require 'company-tng)
    (require 'company-template)

    (add-hook 'company-mode-hook 'company-tng-mode)

    (define-key company-active-map [tab] 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)

    ;; Free SPC and RET, popup will no longer interrupt typing.
    (define-key company-active-map [escape] nil)
    (define-key company-active-map [return] nil)
    (define-key company-active-map (kbd "RET") nil)
    (define-key company-active-map (kbd "SPC") nil)

    (define-key company-template-nav-map (kbd "RET") 'company-template-forward-field)
    (define-key company-template-nav-map [return] 'company-template-forward-field)
    (define-key company-template-nav-map (kbd "TAB") nil)
    (define-key company-template-nav-map [tab] nil))
#+end_src

* Git integration with magit & diff-hl & smerge

To manage the git repository, use builtin package ~vc~.

#+begin_src emacs-lisp
  (straight-use-package 'magit)
  (straight-use-package 'diff-hl)
  (straight-use-package 'smerge-mode)

  (autoload 'magit "magit" nil t)
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl" nil t)
  (autoload 'smerge-mode "smerge-mode" nil t)
#+end_src

Enable diff-hl in some modes.

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
#+end_src

Enable smerge mode after project-find-file.

#+begin_src emacs-lisp
  (add-hook 'find-file-hook 'smerge-mode)
#+end_src

* Project management

To find files/buffers and apply commands on project, use builtin package ~project~.

#+begin_src emacs-lisp
  (setq project-switch-commands '((project-find-file "Find file")
                                  (project-find-regexp "Find regexp")
                                  (project-dired "Dired")
                                  (project-eshell "Eshell")
                                  (shell "Shell")
                                  (magit "Magit")))

  (with-eval-after-load "project"
    (define-key project-prefix-map "s" 'shell)
    (define-key project-prefix-map "m" 'magit))
#+end_src


* Look & Feel
** Disable some UI components

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Colorthemes

#+begin_src emacs-lisp
  (load-theme 'modus-operandi)
#+end_src
